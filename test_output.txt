tests/core/beget.js
LOG: "Plan begun."
LOG: "Beget function Module module: should return a new object with same prototype as that of passed object - 1msec"
LOG: "Beget for an object: truePASSED"
LOG: "Beget for a string: truePASSED"
LOG: "Beget for a hash: truePASSED"
LOG: "Beget for an array: truePASSED"
LOG: "Plan finished."
tests/core/clone.js
LOG: "Plan begun."
LOG: "Cloned Objects module: should return a cloned object - 1msec"
LOG: "OK: SproutCorePASSED"
LOG: "OK: sc20PASSED"
LOG: "OK: 100PASSED"
LOG: "OK: 1,2,3,4,5PASSED"
LOG: "Cloned Objects module: should return cloned object when the object is null - 0msec"
LOG: "OK: nullPASSED"
LOG: "Cloned Objects module: should return a cloned array  - 0msec"
LOG: "check first array item: value1PASSED"
LOG: "check first array item: value2PASSED"
LOG: "Cloned Objects module: should use copy() if isCopyable - 1msec"
LOG: "clone should return a copyPASSED"
LOG: "copy.isCopy should be YES: truePASSED"
LOG: "Cloned Objects module: SC.copy should be an alias for SC.clone - 0msec"
LOG: "SC.copy should equal SC.clone: function( a ){<br />&nbsp;&nbsp;&nbsp;[code]<br />}PASSED"
LOG: "Plan finished."
tests/core/compare.js
LOG: "Plan begun."
LOG: "SC.compare() module: ordering should work - 2msec"
LOG: "0 should equal itself: 0PASSED"
LOG: "v[0] (null) should be smaller than v[1] (boolean): -1PASSED"
LOG: "v[0] (null) should be smaller than v[2] (boolean): -1PASSED"
LOG: "v[0] (null) should be smaller than v[3] (number): -1PASSED"
LOG: "v[0] (null) should be smaller than v[4] (number): -1PASSED"
LOG: "v[0] (null) should be smaller than v[5] (string): -1PASSED"
LOG: "v[0] (null) should be smaller than v[6] (string): -1PASSED"
LOG: "v[0] (null) should be smaller than v[7] (string): -1PASSED"
LOG: "v[0] (null) should be smaller than v[8] (array): -1PASSED"
LOG: "v[0] (null) should be smaller than v[9] (array): -1PASSED"
LOG: "v[0] (null) should be smaller than v[10] (array): -1PASSED"
LOG: "v[0] (null) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[0] (null) should be smaller than v[12] (object): -1PASSED"
LOG: "v[0] (null) should be smaller than v[13] (function): -1PASSED"
LOG: "1 should equal itself: 0PASSED"
LOG: "v[1] (boolean) should be smaller than v[2] (boolean): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[3] (number): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[4] (number): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[5] (string): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[6] (string): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[7] (string): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[8] (array): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[9] (array): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[10] (array): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[12] (object): -1PASSED"
LOG: "v[1] (boolean) should be smaller than v[13] (function): -1PASSED"
LOG: "2 should equal itself: 0PASSED"
LOG: "v[2] (boolean) should be smaller than v[3] (number): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[4] (number): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[5] (string): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[6] (string): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[7] (string): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[8] (array): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[9] (array): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[10] (array): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[12] (object): -1PASSED"
LOG: "v[2] (boolean) should be smaller than v[13] (function): -1PASSED"
LOG: "3 should equal itself: 0PASSED"
LOG: "v[3] (number) should be smaller than v[4] (number): -1PASSED"
LOG: "v[3] (number) should be smaller than v[5] (string): -1PASSED"
LOG: "v[3] (number) should be smaller than v[6] (string): -1PASSED"
LOG: "v[3] (number) should be smaller than v[7] (string): -1PASSED"
LOG: "v[3] (number) should be smaller than v[8] (array): -1PASSED"
LOG: "v[3] (number) should be smaller than v[9] (array): -1PASSED"
LOG: "v[3] (number) should be smaller than v[10] (array): -1PASSED"
LOG: "v[3] (number) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[3] (number) should be smaller than v[12] (object): -1PASSED"
LOG: "v[3] (number) should be smaller than v[13] (function): -1PASSED"
LOG: "4 should equal itself: 0PASSED"
LOG: "v[4] (number) should be smaller than v[5] (string): -1PASSED"
LOG: "v[4] (number) should be smaller than v[6] (string): -1PASSED"
LOG: "v[4] (number) should be smaller than v[7] (string): -1PASSED"
LOG: "v[4] (number) should be smaller than v[8] (array): -1PASSED"
LOG: "v[4] (number) should be smaller than v[9] (array): -1PASSED"
LOG: "v[4] (number) should be smaller than v[10] (array): -1PASSED"
LOG: "v[4] (number) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[4] (number) should be smaller than v[12] (object): -1PASSED"
LOG: "v[4] (number) should be smaller than v[13] (function): -1PASSED"
LOG: "5 should equal itself: 0PASSED"
LOG: "v[5] (string) should be smaller than v[6] (string): -1PASSED"
LOG: "v[5] (string) should be smaller than v[7] (string): -1PASSED"
LOG: "v[5] (string) should be smaller than v[8] (array): -1PASSED"
LOG: "v[5] (string) should be smaller than v[9] (array): -1PASSED"
LOG: "v[5] (string) should be smaller than v[10] (array): -1PASSED"
LOG: "v[5] (string) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[5] (string) should be smaller than v[12] (object): -1PASSED"
LOG: "v[5] (string) should be smaller than v[13] (function): -1PASSED"
LOG: "6 should equal itself: 0PASSED"
LOG: "v[6] (string) should be smaller than v[7] (string): -1PASSED"
LOG: "v[6] (string) should be smaller than v[8] (array): -1PASSED"
LOG: "v[6] (string) should be smaller than v[9] (array): -1PASSED"
LOG: "v[6] (string) should be smaller than v[10] (array): -1PASSED"
LOG: "v[6] (string) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[6] (string) should be smaller than v[12] (object): -1PASSED"
LOG: "v[6] (string) should be smaller than v[13] (function): -1PASSED"
LOG: "7 should equal itself: 0PASSED"
LOG: "v[7] (string) should be smaller than v[8] (array): -1PASSED"
LOG: "v[7] (string) should be smaller than v[9] (array): -1PASSED"
LOG: "v[7] (string) should be smaller than v[10] (array): -1PASSED"
LOG: "v[7] (string) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[7] (string) should be smaller than v[12] (object): -1PASSED"
LOG: "v[7] (string) should be smaller than v[13] (function): -1PASSED"
LOG: "8 should equal itself: 0PASSED"
LOG: "v[8] (array) should be smaller than v[9] (array): -1PASSED"
LOG: "v[8] (array) should be smaller than v[10] (array): -1PASSED"
LOG: "v[8] (array) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[8] (array) should be smaller than v[12] (object): -1PASSED"
LOG: "v[8] (array) should be smaller than v[13] (function): -1PASSED"
LOG: "9 should equal itself: 0PASSED"
LOG: "v[9] (array) should be smaller than v[10] (array): -1PASSED"
LOG: "v[9] (array) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[9] (array) should be smaller than v[12] (object): -1PASSED"
LOG: "v[9] (array) should be smaller than v[13] (function): -1PASSED"
LOG: "10 should equal itself: 0PASSED"
LOG: "v[10] (array) should be smaller than v[11] (hash): -1PASSED"
LOG: "v[10] (array) should be smaller than v[12] (object): -1PASSED"
LOG: "v[10] (array) should be smaller than v[13] (function): -1PASSED"
LOG: "11 should equal itself: 0PASSED"
LOG: "v[11] (hash) should be smaller than v[12] (object): -1PASSED"
LOG: "v[11] (hash) should be smaller than v[13] (function): -1PASSED"
LOG: "12 should equal itself: 0PASSED"
LOG: "v[12] (object) should be smaller than v[13] (function): -1PASSED"
LOG: "13 should equal itself: 0PASSED"
LOG: "Plan finished."
tests/core/console.js
LOG: "Plan begun."
INFO: "Console.info is working"
LOG: "Console.log is working"
WARN: "Console.warn is working"
ERROR: "Console.error is working"
LOG: "Console object module: The console object should be defined for all browsers and work if supported - 0msec"
LOG: "console should not be undefinedPASSED"
LOG: "Plan finished."
tests/core/guidFor.js
LOG: "Plan begun."
LOG: "Object module: should return same guid for same instance every time - 0msec"
LOG: "OK: sc19PASSED"
LOG: "Object module: should return different guid for different instances - 0msec"
LOG: "OKPASSED"
LOG: "Object module: guid should not parse to a number - 0msec"
LOG: "OK: truePASSED"
LOG: "String module: same string instance should have same guide every time - 0msec"
LOG: "OK: ststring APASSED"
LOG: "String module: two string instances with same value should have same guid - 0msec"
LOG: "OK: ststring APASSED"
LOG: "String module: two instances with different value should have different guid - 0msec"
LOG: "OKPASSED"
LOG: "String module: guid should not parse to a number - 0msec"
LOG: "OK: truePASSED"
LOG: "Number module: same number instance should have same guide every time - 0msec"
LOG: "OK: nu23PASSED"
LOG: "Number module: two number instances with same value should have same guid - 0msec"
LOG: "OK: nu23PASSED"
LOG: "Number module: two instances with different value should have different guid - 1msec"
LOG: "OKPASSED"
LOG: "Number module: guid should not parse to a number - 0msec"
LOG: "OK: truePASSED"
LOG: "Boolean module: should always have same guid - 0msec"
LOG: "OK: (true)PASSED"
LOG: "OK: (false)PASSED"
LOG: "Boolean module: true should have different guid than false - 0msec"
LOG: "OKPASSED"
LOG: "Boolean module: guid should not parse to a number - 0msec"
LOG: "guid for boolean-true: truePASSED"
LOG: "guid for boolean-false: truePASSED"
LOG: "Null and Undefined module: should always have same guid - 0msec"
LOG: "OK: (null)PASSED"
LOG: "OK: (undefined)PASSED"
LOG: "Null and Undefined module: null should have different guid than undefined - 0msec"
LOG: "OKPASSED"
LOG: "Null and Undefined module: guid should not parse to a number - 0msec"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "Arrays module: same array instance should have same guide every time - 0msec"
LOG: "OK: sc23PASSED"
LOG: "OK: sc24PASSED"
LOG: "Arrays module: two array instances with same value, by assigning one to the other. - 0msec"
LOG: "OK: sc25PASSED"
LOG: "Arrays module: two array instances with same value, by assigning the same value - 0msec"
LOG: "OKPASSED"
LOG: "Arrays module: two instances with different value should have different guid - 0msec"
LOG: "OKPASSED"
LOG: "OKPASSED"
LOG: "Arrays module: guid should not parse to a number - 0msec"
LOG: "OK: truePASSED"
LOG: "Plan finished."
tests/core/inspect.js
LOG: "Plan begun."
LOG: "Inspect module module: SC.inspect module should give a string type - 2msec"
LOG: "description of the array: truePASSED"
LOG: "description of the numbers: truePASSED"
LOG: "description of the object: truePASSED"
LOG: "Plan finished."
tests/core/isArray.js
LOG: "Plan begun."
LOG: "Array Check module: should check if a given object is an array or not  - 1msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "OK: falsePASSED"
LOG: "Plan finished."
tests/core/IsEqual.js
LOG: "Plan begun."
LOG: "String's - isEqual module: strings should be equal  - 0msec"
LOG: "OK: falsePASSED"
LOG: "OK: truePASSED"
LOG: "Number's - isEqual module: numericals should be equal  - 0msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "Array's - isEqual module: array should be equal   - 0msec"
LOG: "two array instances with the same values should not be equal: falsePASSED"
LOG: "two array instances with different values should not be equal: falsePASSED"
LOG: "Plan finished."
tests/core/itemType.js
LOG: "Plan begun."
LOG: "item type module: should return the type for the passed item - 0msec"
LOG: "item of type null : nullPASSED"
LOG: "item of type array : arrayPASSED"
LOG: "item of type hash: hashPASSED"
LOG: "item of type object: objectPASSED"
LOG: "item of type function: functionPASSED"
LOG: "item of type class: classPASSED"
LOG: "none or undefined object type module: should return true for null and undefined  - 0msec"
LOG: "for a null parameter passed  : truePASSED"
LOG: "for a undefined parameter passed : truePASSED"
LOG: "Plan finished."
tests/core/keys.js
LOG: "Plan begun."
LOG: "Fetch Keys  module: should get a key array for a specified object  - 1msec"
LOG: "OK: names,age,placePASSED"
LOG: "Plan finished."
tests/core/makeArray.js
LOG: "Plan begun."
LOG: "Make Array  module: should return an array for the object passed  - 0msec"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "Plan finished."
tests/core/objectForPropertyPath.js
LOG: "Plan begun."
LOG: "SC.objectForPropertyPath module: should be able to resolve an object on the window - 3msec"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"test\": \"this \"<br />}PASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"test\": \"this \"<br />}PASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"test\": \"this \"<br />}PASSED"
LOG: "Plan finished."
tests/core/tupleForPropertyPath.js
LOG: "Plan begun."
ERROR: "Checking the tuple for property path module: should check for the tuple property - 21msec"
LOG: "Died on test #1: TypeError: Cannot read property '0' of undefinedERRORS"
LOG: "Checking the tuple for property path module: should check for the tuple property when path is undefined - 0msec"
LOG: "returns null for undefined path: truePASSED"
ERROR: "Errors:"
ERROR: "Died on test #1: TypeError: Cannot read property '0' of undefined errors"
ERROR: "Had errors."
LOG: "Plan finished."
tests/base/console.js
ERROR: "NO PLAN!!!"
tests/mixins/array.js
LOG: "Plan begun."
LOG: "Verify SC.Array compliance: built-in Array#length module: should return 0 on empty array - 1msec"
LOG: "should have empty length: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#length module: should return array length - 0msec"
LOG: "should return length: 3PASSED"
LOG: "Verify SC.Array compliance: built-in Array#indexOf module: should return index of object - 1msec"
LOG: "obj.indexOf(0) should match idx: 0PASSED"
LOG: "obj.indexOf(1) should match idx: 1PASSED"
LOG: "obj.indexOf(2) should match idx: 2PASSED"
LOG: "Verify SC.Array compliance: built-in Array#indexOf module: should return -1 when requesting object not in index - 0msec"
LOG: "obj.indexOf(foo) should be < 0: -1PASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [].insertAt(0, X) => [X] + notify - 2msec"
LOG: "length should update (0): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [].insertAt(200,X) => OUT_OF_RANGE_EXCEPTION exception - 0msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [A].insertAt(0, X) => [X,A] + notify - 0msec"
LOG: "length should update (1,0): 2PASSED"
LOG: "objectAt(1): 0PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [A].insertAt(1, X) => [A,X] + notify - 0msec"
LOG: "length should update (0,1): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [A].insertAt(200,X) => OUT_OF_RANGE exception - 1msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [A,B,C].insertAt(0,X) => [X,A,B,C] + notify - 1msec"
LOG: "length should update (0,1,2,3): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [A,B,C].insertAt(1,X) => [A,X,B,C] + notify - 0msec"
LOG: "length should update (1,0,2,3): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 0PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#insertAt module: [A,B,C].insertAt(3,X) => [A,B,C,X] + notify - 0msec"
LOG: "length should update (1,2,3,0): 4PASSED"
LOG: "objectAt(3): 0PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#objectAt module: should return object at specified index - 0msec"
LOG: "obj.objectAt(0) should match: 0PASSED"
LOG: "obj.objectAt(1) should match: 1PASSED"
LOG: "obj.objectAt(2) should match: 2PASSED"
LOG: "Verify SC.Array compliance: built-in Array#objectAt module: should return undefined when requesting objects beyond index - 0msec"
LOG: "should return undefined for obj.objectAt(5) when len = 3: undefinedPASSED"
LOG: "should return undefined for obj.objectAt(0) when len = 0: undefinedPASSED"
LOG: "Verify SC.Array compliance: built-in Array#popObject module: [].popObject() => [] + returns undefined + NO notify - 0msec"
LOG: "should return undefined: undefinedPASSED"
LOG: "length should update (): 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#popObject module: [X].popObject() => [] + notify - 1msec"
LOG: "should return popped object: 0PASSED"
LOG: "length should update (): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#popObject module: [A,B,C].popObject() => [A,B] + notify - 1msec"
LOG: "should return popped object: 2PASSED"
LOG: "length should update (0,1): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#pushObject module: returns pushed object - 2msec"
LOG: "should return receiver: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#pushObject module: [].pushObject(X) => [X] + notify - 0msec"
LOG: "length should update (0): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#pushObject module: [A,B,C].pushObject(X) => [A,B,C,X] + notify - 0msec"
LOG: "length should update (0,1,2,3): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: returns RangeObserver object - 2msec"
LOG: "returns a range observer objectPASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: replacing object in range fires observer with index set covering only the effected item - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc67,:sc66,:sc70,:sc64,:sc63,:sc62,:sc61,:sc60,:sc59,:sc58PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: replacing object before range - 1msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: replacing object after range - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: updating range should be reflected by replace operations - 3msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "expects one callback: 1PASSED"
LOG: ":sc110,:sc105,:sc109,:sc103,:sc102,:sc101,:sc100,:sc99,:sc98,:sc111PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: removing range should no longer fire observers - 1msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: grouping property changes should notify observer only once at end with single IndexSet - 3msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc136,:sc135,:sc139,:sc133,:sc140,:sc131,:sc130,:sc129,:sc128,:sc127PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,4> (actual: SC.IndexSet<2,4>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: should notify observer when some but not all grouped changes are inside range - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc150,:sc149,:sc153,:sc147,:sc146,:sc145,:sc144,:sc143,:sc142,:sc154PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,9> (actual: SC.IndexSet<2,9>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: should NOT notify observer when grouping changes all outside of observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: insertAt in range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc178,:sc177,:sc176,:sc181,:sc175,:sc174,:sc173,:sc172,:sc171,:sc170,:sc169PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..10> (actual: SC.IndexSet<3..10>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: insertAt BEFORE range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc194,:sc191,:sc190,:sc189,:sc188,:sc187,:sc186,:sc185,:sc184,:sc183,:sc182PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0..10> (actual: SC.IndexSet<0..10>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: insertAt AFTER range does not fire observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: removeAt IN range fires observer with index set covering edit to end of array plus delta - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc217,:sc216,:sc215,:sc213,:sc212,:sc211,:sc210,:sc209,:sc208PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..9> (actual: SC.IndexSet<3..9>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: removeAt BEFORE range fires observer with index set covering edit to end of array plus delta - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc228,:sc227,:sc226,:sc225,:sc224,:sc223,:sc222,:sc221,:sc220PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0..9> (actual: SC.IndexSet<0..9>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods module: removeAt AFTER range does not fire observer - 1msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: returns RangeObserver object - 1msec"
LOG: "returns a range observer objectPASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: replacing object in range fires observer with index set covering only the effected item - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc265,:sc264,:sc268,:sc262,:sc261,:sc260,:sc259,:sc258,:sc257,:sc256PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: replacing at start of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc281,:sc277,:sc276,:sc275,:sc274,:sc273,:sc272,:sc271,:sc270,:sc269PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0> (actual: SC.IndexSet<0>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: replacing object at end of array - 1msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc291,:sc290,:sc289,:sc288,:sc287,:sc286,:sc285,:sc284,:sc283,:sc294PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: removing range should no longer fire observers - 1msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: grouping property changes should notify observer only once at end with single IndexSet - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc319,:sc318,:sc322,:sc316,:sc323,:sc314,:sc313,:sc312,:sc311,:sc310PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,4> (actual: SC.IndexSet<2,4>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: insertAt in range fires observer with index set covering edit to end of array - 1msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc333,:sc332,:sc331,:sc336,:sc330,:sc329,:sc328,:sc327,:sc326,:sc325,:sc324PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..10> (actual: SC.IndexSet<3..10>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: adding object fires observer - 3msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc346,:sc345,:sc344,:sc343,:sc342,:sc341,:sc340,:sc339,:sc338,:sc337,:sc349PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<10> (actual: SC.IndexSet<10>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: removeAt fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc359,:sc358,:sc357,:sc355,:sc354,:sc353,:sc352,:sc351,:sc350PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..9> (actual: SC.IndexSet<3..9>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - No explicit range module: popObject fires observer with index set covering removed range - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc371,:sc370,:sc369,:sc368,:sc367,:sc366,:sc365,:sc364,:sc363PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - isDeep NO module: editing property on object at any point should not fire observer - 1msec"
LOG: "observer should not fire when editing object at index 9: 0PASSED"
LOG: "observer should not fire when editing object at index 3: 0PASSED"
LOG: "observer should not fire when editing object at index 0: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#RangeObserver Methods - isDeep NO module: replacing object in range fires observer with index set - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc395,:sc394,:sc398,:sc392,:sc391,:sc390,:sc389,:sc388,:sc387,:sc386PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeAt module: [X].removeAt(0) => [] + notify - 1msec"
LOG: "length should update (): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeAt module: [].removeAt(200) => OUT_OF_RANGE_EXCEPTION exception - 0msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeAt module: [A,B].removeAt(0) => [B] + notify - 1msec"
LOG: "length should update (1): 1PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeAt module: [A,B].removeAt(1) => [A] + notify - 1msec"
LOG: "length should update (0): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeAt module: [A,B,C].removeAt(1) => [A,C] + notify - 0msec"
LOG: "length should update (0,2): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeAt module: [A,B,C,D].removeAt(1,2) => [A,D] + notify - 0msec"
LOG: "length should update (0,3): 2PASSED"
LOG: "objectAt(1): 3PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeAt module: [A,B,C,D].removeAt(IndexSet<0,2-3>) => [B] + notify - 1msec"
LOG: "length should update (1): 1PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeObject module: should return receiver - 0msec"
LOG: "should return receiver: 1,2PASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeObject module: [A,B,C].removeObject(B) => [A,C] + notify - 1msec"
LOG: "length should update (0,2): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#removeObject module: [A,B,C].removeObject(D) => [A,B,C] - 0msec"
LOG: "length should update (0,1,2): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#replace module: [].replace(0,0,'X') => ['X'] + notify - 1msec"
LOG: "length should update (0): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#replace module: [A,B,C,D].replace(1,2,X) => [A,X,D] + notify - 1msec"
LOG: "length should update (0,4,3): 3PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 4PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#replace module: [A,B,C,D].replace(1,2,[X,Y]) => [A,X,Y,D] + notify - 1msec"
LOG: "length should update (0,4,5,3): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 5PASSED"
LOG: "objectAt(1): 4PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#replace module: [A,B].replace(1,0,[X,Y]) => [A,X,Y,B] + notify - 1msec"
LOG: "length should update (0,2,3,1): 4PASSED"
LOG: "objectAt(3): 1PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#replace module: [A,B,C,D].replace(2,2) => [A,B] + notify - 0msec"
LOG: "length should update (0,1): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#shiftObject module: [].shiftObject() => [] + returns undefined + NO notify - 1msec"
LOG: "should return undefined: undefinedPASSED"
LOG: "length should update (): 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#shiftObject module: [X].shiftObject() => [] + notify - 1msec"
LOG: "should return shifted object: 0PASSED"
LOG: "length should update (): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#shiftObject module: [A,B,C].shiftObject() => [B,C] + notify - 0msec"
LOG: "should return shifted object: 0PASSED"
LOG: "length should update (1,2): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#unshiftObject module: returns unshifted object - 0msec"
LOG: "should return receiver: 0PASSED"
LOG: "Verify SC.Array compliance: built-in Array#unshiftObject module: [].unshiftObject(X) => [X] + notify - 1msec"
LOG: "length should update (0): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: built-in Array#unshiftObject module: [A,B,C].unshiftObject(X) => [X,A,B,C] + notify - 0msec"
LOG: "length should update (0,1,2,3): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#length module: should return 0 on empty array - 1msec"
LOG: "should have empty length: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#length module: should return array length - 0msec"
LOG: "should return length: 3PASSED"
LOG: "Verify SC.Array compliance: DummyArray#indexOf module: should return index of object - 0msec"
LOG: "obj.indexOf(0) should match idx: 0PASSED"
LOG: "obj.indexOf(1) should match idx: 1PASSED"
LOG: "obj.indexOf(2) should match idx: 2PASSED"
LOG: "Verify SC.Array compliance: DummyArray#indexOf module: should return -1 when requesting object not in index - 1msec"
LOG: "obj.indexOf(foo) should be < 0: -1PASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [].insertAt(0, X) => [X] + notify - 0msec"
LOG: "length should update (:sc445): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [].insertAt(200,X) => OUT_OF_RANGE_EXCEPTION exception - 1msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [A].insertAt(0, X) => [X,A] + notify - 1msec"
LOG: "length should update (:sc450): 2PASSED"
LOG: "objectAt(1): 0PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [A].insertAt(1, X) => [A,X] + notify - 1msec"
LOG: "length should update (:sc453): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [A].insertAt(200,X) => OUT_OF_RANGE exception - 0msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [A,B,C].insertAt(0,X) => [X,A,B,C] + notify - 1msec"
LOG: "length should update (:sc458): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [A,B,C].insertAt(1,X) => [A,X,B,C] + notify - 1msec"
LOG: "length should update (:sc461): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 0PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#insertAt module: [A,B,C].insertAt(3,X) => [A,B,C,X] + notify - 1msec"
LOG: "length should update (:sc464): 4PASSED"
LOG: "objectAt(3): 0PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#objectAt module: should return object at specified index - 0msec"
LOG: "obj.objectAt(0) should match: 0PASSED"
LOG: "obj.objectAt(1) should match: 1PASSED"
LOG: "obj.objectAt(2) should match: 2PASSED"
LOG: "Verify SC.Array compliance: DummyArray#objectAt module: should return undefined when requesting objects beyond index - 0msec"
LOG: "should return undefined for obj.objectAt(5) when len = 3: undefinedPASSED"
LOG: "should return undefined for obj.objectAt(0) when len = 0: undefinedPASSED"
LOG: "Verify SC.Array compliance: DummyArray#popObject module: [].popObject() => [] + returns undefined + NO notify - 1msec"
LOG: "should return undefined: undefinedPASSED"
LOG: "length should update (:sc471): 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#popObject module: [X].popObject() => [] + notify - 1msec"
LOG: "should return popped object: 0PASSED"
LOG: "length should update (:sc474): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#popObject module: [A,B,C].popObject() => [A,B] + notify - 1msec"
LOG: "should return popped object: 2PASSED"
LOG: "length should update (:sc477): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#pushObject module: returns pushed object - 0msec"
LOG: "should return receiver: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#pushObject module: [].pushObject(X) => [X] + notify - 1msec"
LOG: "length should update (:sc482): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#pushObject module: [A,B,C].pushObject(X) => [A,B,C,X] + notify - 1msec"
LOG: "length should update (:sc485): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: returns RangeObserver object - 1msec"
LOG: "returns a range observer objectPASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: replacing object in range fires observer with index set covering only the effected item - 5msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc511PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: replacing object before range - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: replacing object after range - 1msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: updating range should be reflected by replace operations - 3msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "expects one callback: 1PASSED"
LOG: ":sc553PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: removing range should no longer fire observers - 1msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: grouping property changes should notify observer only once at end with single IndexSet - 3msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc585PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,4> (actual: SC.IndexSet<2,4>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: should notify observer when some but not all grouped changes are inside range - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc600PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,9> (actual: SC.IndexSet<2,9>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: should NOT notify observer when grouping changes all outside of observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: insertAt in range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc630PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..10> (actual: SC.IndexSet<3..10>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: insertAt BEFORE range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc644PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0..10> (actual: SC.IndexSet<0..10>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: insertAt AFTER range does not fire observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: removeAt IN range fires observer with index set covering edit to end of array plus delta - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc672PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..9> (actual: SC.IndexSet<3..9>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: removeAt BEFORE range fires observer with index set covering edit to end of array plus delta - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc685PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0..9> (actual: SC.IndexSet<0..9>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods module: removeAt AFTER range does not fire observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: returns RangeObserver object - 0msec"
LOG: "returns a range observer objectPASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: replacing object in range fires observer with index set covering only the effected item - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc724PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: replacing at start of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc738PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0> (actual: SC.IndexSet<0>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: replacing object at end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc752PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: removing range should no longer fire observers - 1msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: grouping property changes should notify observer only once at end with single IndexSet - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc782PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,4> (actual: SC.IndexSet<2,4>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: insertAt in range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc797PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..10> (actual: SC.IndexSet<3..10>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: adding object fires observer - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc811PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<10> (actual: SC.IndexSet<10>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: removeAt fires observer with index set covering edit to end of array - 1msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc825PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..9> (actual: SC.IndexSet<3..9>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - No explicit range module: popObject fires observer with index set covering removed range - 1msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc838PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - isDeep NO module: editing property on object at any point should not fire observer - 1msec"
LOG: "observer should not fire when editing object at index 9: 0PASSED"
LOG: "observer should not fire when editing object at index 3: 0PASSED"
LOG: "observer should not fire when editing object at index 0: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#RangeObserver Methods - isDeep NO module: replacing object in range fires observer with index set - 1msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc864PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeAt module: [X].removeAt(0) => [] + notify - 0msec"
LOG: "length should update (:sc868): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeAt module: [].removeAt(200) => OUT_OF_RANGE_EXCEPTION exception - 0msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeAt module: [A,B].removeAt(0) => [B] + notify - 1msec"
LOG: "length should update (:sc873): 1PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeAt module: [A,B].removeAt(1) => [A] + notify - 1msec"
LOG: "length should update (:sc876): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeAt module: [A,B,C].removeAt(1) => [A,C] + notify - 1msec"
LOG: "length should update (:sc879): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeAt module: [A,B,C,D].removeAt(1,2) => [A,D] + notify - 1msec"
LOG: "length should update (:sc882): 2PASSED"
LOG: "objectAt(1): 3PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeAt module: [A,B,C,D].removeAt(IndexSet<0,2-3>) => [B] + notify - 1msec"
LOG: "length should update (:sc885): 1PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeObject module: should return receiver - 1msec"
LOG: "should return receiver: :sc890PASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeObject module: [A,B,C].removeObject(B) => [A,C] + notify - 1msec"
LOG: "length should update (:sc891): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#removeObject module: [A,B,C].removeObject(D) => [A,B,C] - 0msec"
LOG: "length should update (:sc894): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#replace module: [].replace(0,0,'X') => ['X'] + notify - 0msec"
LOG: "length should update (:sc897): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#replace module: [A,B,C,D].replace(1,2,X) => [A,X,D] + notify - 1msec"
LOG: "length should update (:sc900): 3PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 4PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#replace module: [A,B,C,D].replace(1,2,[X,Y]) => [A,X,Y,D] + notify - 1msec"
LOG: "length should update (:sc903): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 5PASSED"
LOG: "objectAt(1): 4PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#replace module: [A,B].replace(1,0,[X,Y]) => [A,X,Y,B] + notify - 1msec"
LOG: "length should update (:sc906): 4PASSED"
LOG: "objectAt(3): 1PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#replace module: [A,B,C,D].replace(2,2) => [A,B] + notify - 1msec"
LOG: "length should update (:sc909): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#shiftObject module: [].shiftObject() => [] + returns undefined + NO notify - 1msec"
LOG: "should return undefined: undefinedPASSED"
LOG: "length should update (:sc912): 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#shiftObject module: [X].shiftObject() => [] + notify - 1msec"
LOG: "should return shifted object: 0PASSED"
LOG: "length should update (:sc915): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#shiftObject module: [A,B,C].shiftObject() => [B,C] + notify - 1msec"
LOG: "should return shifted object: 0PASSED"
LOG: "length should update (:sc918): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#unshiftObject module: returns unshifted object - 0msec"
LOG: "should return receiver: 0PASSED"
LOG: "Verify SC.Array compliance: DummyArray#unshiftObject module: [].unshiftObject(X) => [X] + notify - 1msec"
LOG: "length should update (:sc923): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: DummyArray#unshiftObject module: [A,B,C].unshiftObject(X) => [X,A,B,C] + notify - 1msec"
LOG: "length should update (:sc926): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Plan finished."
tests/mixins/comparable.js
LOG: "Plan begun."
LOG: "Comparable module: should be comparable and return the correct result - 2msec"
LOG: "OK: truePASSED"
LOG: "OK: 0PASSED"
LOG: "OK: -1PASSED"
LOG: "OK: 1PASSED"
LOG: "Plan finished."
tests/mixins/enumerable.js
LOG: "Plan begun."
LOG: "Real Array & DummyEnumerable module: should get enumerator that iterates through objects - 3msec"
LOG: "enumerator must not be nullPASSED"
LOG: "object at index 0: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "object at index 1: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "object at index 2: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "object at index 3: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "OK: 4PASSED"
LOG: "enumerator must not be nullPASSED"
LOG: "object at index 0: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "object at index 1: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "object at index 2: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "object at index 3: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "OK: 4PASSED"
LOG: "Real Array & DummyEnumerable module: should return firstObject for item with content - 1msec"
LOG: "firstObject should return first object: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "firstObject should return first object: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "firstObject() on empty enumerable should return undefined: undefinedPASSED"
LOG: "Real Array & DummyEnumerable module: should run forEach() to go through objects - 2msec"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "OK: 0PASSED"
LOG: "OK: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "target should always be thisPASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "OK: 1PASSED"
LOG: "OK: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "target should always be thisPASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "OK: 2PASSED"
LOG: "OK: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "target should always be thisPASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "OK: 3PASSED"
LOG: "OK: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "target should always be thisPASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "OK: 0PASSED"
LOG: "OK: :sc23PASSED"
LOG: "target should always be thisPASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "OK: 1PASSED"
LOG: "OK: :sc23PASSED"
LOG: "target should always be thisPASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "OK: 2PASSED"
LOG: "OK: :sc23PASSED"
LOG: "target should always be thisPASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "OK: 3PASSED"
LOG: "OK: :sc23PASSED"
LOG: "target should always be thisPASSED"
LOG: "Real Array & DummyEnumerable module: should map to values while passing proper params - 1msec"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 0PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 1PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 2PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 3PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: :sc24PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 0PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: :sc24PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 1PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: :sc24PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 2PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: :sc24PASSED"
LOG: "this: sc25PASSED"
LOG: "mapped: 3PASSED"
LOG: "Real Array & DummyEnumerable module: should filter to items that return for callback - 2msec"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "OK: 1PASSED"
LOG: "OK: JennaPASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: :sc26PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: :sc26PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: :sc26PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: :sc26PASSED"
LOG: "this: sc25PASSED"
LOG: "OK: 1PASSED"
LOG: "OK: JennaPASSED"
LOG: "Real Array & DummyEnumerable module: should return true if function for every() returns true - 1msec"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "OK: truePASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: :sc27PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: :sc27PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: :sc27PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: :sc27PASSED"
LOG: "this: sc25PASSED"
LOG: "OK: truePASSED"
LOG: "Real Array & DummyEnumerable module: should return false if one function for every() returns false - 0msec"
LOG: "OK: falsePASSED"
LOG: "OK: falsePASSED"
LOG: "Real Array & DummyEnumerable module: should return false if all functions for some() returns false - 2msec"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: [object Object],[object Object],[object Object],[object Object]PASSED"
LOG: "this: sc25PASSED"
LOG: "OK: falsePASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "indexes: 0PASSED"
LOG: "arrays: :sc29PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Jenna\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"female\",<br />&nbsp;&nbsp;&nbsp;\"californian\": true,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 2<br />}PASSED"
LOG: "indexes: 1PASSED"
LOG: "arrays: :sc29PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Peter\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 3<br />}PASSED"
LOG: "indexes: 2PASSED"
LOG: "arrays: :sc29PASSED"
LOG: "this: sc25PASSED"
LOG: "items: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "indexes: 3PASSED"
LOG: "arrays: :sc29PASSED"
LOG: "this: sc25PASSED"
LOG: "OK: falsePASSED"
LOG: "Real Array & DummyEnumerable module: should return true if one function for some() returns true - 0msec"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "Real Array & DummyEnumerable module: should mapProperty for all items - 0msec"
LOG: "OK: CharlesPASSED"
LOG: "OK: JennaPASSED"
LOG: "OK: PeterPASSED"
LOG: "OK: ChrisPASSED"
LOG: "OK: CharlesPASSED"
LOG: "OK: JennaPASSED"
LOG: "OK: PeterPASSED"
LOG: "OK: ChrisPASSED"
LOG: "Real Array & DummyEnumerable module: should filterProperty with match - 0msec"
LOG: "OK: 1PASSED"
LOG: "OK: JennaPASSED"
LOG: "OK: 1PASSED"
LOG: "OK: JennaPASSED"
LOG: "Real Array & DummyEnumerable module: should filterProperty with default bool - 0msec"
LOG: "OK: 1PASSED"
LOG: "OK: JennaPASSED"
LOG: "OK: 1PASSED"
LOG: "OK: JennaPASSED"
LOG: "Real Array & DummyEnumerable module: everyProperty should return true if all properties macth - 1msec"
LOG: "visited: truePASSED"
LOG: "visited: truePASSED"
LOG: "Real Array & DummyEnumerable module: everyProperty should return true if all properties true - 0msec"
LOG: "ready: truePASSED"
LOG: "ready: truePASSED"
LOG: "Real Array & DummyEnumerable module: everyProperty should return false if any properties false - 0msec"
LOG: "ready: falsePASSED"
LOG: "ready: falsePASSED"
LOG: "Real Array & DummyEnumerable module: someProperty should return false if all properties not match - 1msec"
LOG: "visited: falsePASSED"
LOG: "visited: falsePASSED"
LOG: "Real Array & DummyEnumerable module: someProperty should return false if all properties false - 0msec"
LOG: "doneTravelling: falsePASSED"
LOG: "doneTravelling: falsePASSED"
LOG: "Real Array & DummyEnumerable module: someProperty should return true if any properties true - 0msec"
LOG: "first: truePASSED"
LOG: "first: truePASSED"
LOG: "Real Array & DummyEnumerable module: invokeWhile should call method on member objects until return does not match - 0msec"
LOG: "return value: FAILPASSED"
LOG: "return value: FAILPASSED"
LOG: "Real Array & DummyEnumerable module: get @min(balance) should return the minimum balance - 1msec"
LOG: "OK: 1PASSED"
LOG: "OK: 1PASSED"
LOG: "Real Array & DummyEnumerable module: get @max(balance) should return the maximum balance - 0msec"
LOG: "OK: 4PASSED"
LOG: "OK: 4PASSED"
LOG: "Real Array & DummyEnumerable module: get @minObject(balance) should return the record with min balance - 1msec"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Charles\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 1<br />}PASSED"
LOG: "Real Array & DummyEnumerable module: get @maxObject(balance) should return the record with the max balance - 1msec"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "OK: {<br />&nbsp;&nbsp;&nbsp;\"first\": \"Chris\",<br />&nbsp;&nbsp;&nbsp;\"gender\": \"male\",<br />&nbsp;&nbsp;&nbsp;\"californian\": false,<br />&nbsp;&nbsp;&nbsp;\"ready\": true,<br />&nbsp;&nbsp;&nbsp;\"visited\": \"Prague\",<br />&nbsp;&nbsp;&nbsp;\"doneTravelling\": false,<br />&nbsp;&nbsp;&nbsp;\"run\": function( a, b ){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"invokeWhileTest\": function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[code]<br />&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;\"balance\": 4<br />}PASSED"
LOG: "Real Array & DummyEnumerable module: get @sum(balance) should return the sum of the balances. - 0msec"
LOG: "OK: 10PASSED"
LOG: "OK: 10PASSED"
LOG: "Real Array & DummyEnumerable module: get @average(balance) should return the average of balances - 1msec"
LOG: "OK: 2.5PASSED"
LOG: "OK: 2.5PASSED"
LOG: "Real Array & DummyEnumerable module: should invoke custom reducer - 0msec"
LOG: "OK: TESTPASSED"
LOG: "OK: propPASSED"
LOG: "OK: TESTPASSED"
LOG: "OK: propPASSED"
LOG: "CHANGE: [object Object],[object Object],[object Object],[object Object],[object Object][@max(balance)] => 5"
LOG: "CHANGE: [object Object],[object Object],[object Object],[object Object],[object Object][[]] => [object Object],[object Object],[object Object],[object Object],[object Object]"
LOG: "CHANGE: :sc64[@max(balance)] => 5"
LOG: "CHANGE: :sc64[[]] => :sc64"
LOG: "Real Array & DummyEnumerable module: should trigger observer of reduced prop when array changes once property retrieved once - 3msec"
LOG: "observedValue: 5PASSED"
LOG: "observedValue: 5PASSED"
LOG: "Real Array & DummyEnumerable module: should trigger observer of reduced prop when array changes - even if you never retrieved the property before - 1msec"
LOG: "observedValue: 5PASSED"
LOG: "observedValue: 5PASSED"
LOG: "Real Array & DummyEnumerable module: should find the first element matching the criteria - 0msec"
LOG: "OK: JennaPASSED"
LOG: "CHANGE: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object][@max(balance)] => 5"
LOG: "CHANGE: [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object][[]] => [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]"
LOG: "Real Array module: should notify observers even if reduced property is cached on prototype - 1msec"
LOG: "observedValue: 5PASSED"
LOG: "Plan finished."
tests/mixins/propertyChanges.js
LOG: "Plan begun."
LOG: "object.propertyChanges() module: should increment the indicator before begining the changes to the object - 1msec"
LOG: "OK: 1PASSED"
LOG: "object.propertyChanges() module: should increment the indicator before begining the changes to the object - 1msec"
LOG: "OK: 0PASSED"
LOG: "object.propertyChanges() module: should indicate that the property of an object has just changed - 1msec"
LOG: "OK: :sc21PASSED"
LOG: "OK: :sc21PASSED"
LOG: "OK: newValuePASSED"
LOG: "object.propertyChanges() module: should notify that the property of an object has changed - 1msec"
LOG: "OK: newDependentValuePASSED"
LOG: "object.propertyChanges() module: should notify all observers that their property might have changed - 0msec"
LOG: "OK: newZeroValuePASSED"
LOG: "Plan finished."
tests/system/binding.js
LOG: "Plan begun."
LOG: "basic object binding module: binding is connected - 2msec"
LOG: "binding.isConnected: truePASSED"
LOG: "basic object binding module: binding has actually been setup - 1msec"
LOG: "binding._connectionPending: falsePASSED"
LOG: "basic object binding module: binding should have synced on connect - 1msec"
LOG: "toObject.value should match fromObject.value: startPASSED"
LOG: "basic object binding module: changing fromObject should mark binding as dirty - 1msec"
LOG: "OK: truePASSED"
LOG: "basic object binding module: fromObject change should propogate to toObject only after flush - 1msec"
LOG: "OK: startPASSED"
LOG: "OK: changePASSED"
LOG: "basic object binding module: changing toObject should mark binding as dirty - 0msec"
LOG: "OK: truePASSED"
LOG: "basic object binding module: toObject change should propogate to fromObject only after flush - 1msec"
LOG: "OK: startPASSED"
LOG: "OK: changePASSED"
LOG: "basic object binding module: suspended observing during bindings - 2msec"
LOG: "value1 when observer fires: CHANGEDPASSED"
LOG: "value2 when observer fires: CHANGEDPASSED"
LOG: "value1 when observer fires: CHANGEDPASSED"
LOG: "value2 when observer fires: CHANGEDPASSED"
LOG: "should call observer twice: 2PASSED"
LOG: "one way binding module: changing fromObject should mark binding as dirty - 0msec"
LOG: "OK: truePASSED"
LOG: "one way binding module: fromObject change should propogate after flush - 1msec"
LOG: "OK: startPASSED"
LOG: "OK: changePASSED"
LOG: "one way binding module: changing toObject should not make binding dirty - 1msec"
LOG: "OK: falsePASSED"
LOG: "one way binding module: toObject change should NOT propogate - 0msec"
LOG: "OK: startPASSED"
LOG: "OK: startPASSED"
LOG: "chained binding module: changing first output should propograte to third after flush - 3msec"
LOG: "first.output: changePASSED"
LOG: "third.inputPASSED"
LOG: "binding1._changePending: falsePASSED"
LOG: "binding2._changePending: falsePASSED"
LOG: "first.output: changePASSED"
LOG: "second.input: changePASSED"
LOG: "second.output: changePASSED"
LOG: "third.input: changePASSED"
LOG: "Custom Binding module: Binding value1 such that it will recieve only single values - 2msec"
LOG: "OK: changedPASSED"
LOG: "OK: @@MULT@@PASSED"
LOG: "Custom Binding module: Single binding using notEmpty function. - 1msec"
LOG: "OK: (EMPTY)PASSED"
LOG: "Custom Binding module: Binding with transforms, function to check the type of value - 1msec"
LOG: "OK: changedPASSED"
LOG: "-- SC.RunLoop.beginRunLoop at 1261244956299"
LOG: "-- SC.RunLoop.endRunLoop ~ flushing application queues"
LOG: "Begin: Trigger changed bindings"
LOG: "SC.Bindingsc85(a.foo -> <:sc84>:foo): bar -> bar"
LOG: "SC.Bindingsc85(a.foo -> <:sc84>:foo): bar <- bar"
LOG: "SC.Bindingsc87(*owner.foo -> <:sc86>:foo): bar -> bar"
LOG: "SC.Bindingsc87(*owner.foo -> <:sc86>:foo): bar <- bar"
LOG: "End: Trigger changed bindings"
LOG: "-- SC.RunLoop.endRunLoop ~ End"
LOG: "Custom Binding module: two bindings to the same value should sync in the order they are initialized - 3msec"
LOG: "a.foo should not change: barPASSED"
LOG: "a.foo should propogate up to b.foo: barPASSED"
LOG: "a.foo should propogate up to b.c.foo: barPASSED"
LOG: "Plan finished."
tests/system/cookie.js
ERROR: "NO PLAN!!!"
tests/system/error.js
LOG: "Plan begun."
LOG: "SC.ERROR module: SC.Error.desc creates an error instance with description,label and code - 1msec"
LOG: "Error instance: errorPASSED"
LOG: "Description: This is an error instancePASSED"
LOG: "Label: Error InstancePASSED"
LOG: "error value should be set: FOOPASSED"
LOG: "Code: 99999PASSED"
LOG: "SC.ERROR module: SC.$error creates an error instance with description,label and code - 0msec"
LOG: "New Error instance: errorPASSED"
LOG: "Description: This is a new error instancePASSED"
LOG: "Label: New Error InstancePASSED"
LOG: "error value should be set: FOOPASSED"
LOG: "Code: 99999PASSED"
LOG: "SC.ERROR module: SC.$ok should return YES if the passed value is an error object or false - 0msec"
LOG: "$ok(true) should be YESPASSED"
LOG: "$ok(false) should be NOPASSED"
LOG: "$ok(null) should be YESPASSED"
LOG: "$ok(undefined) should be YESPASSED"
LOG: "$ok(foo) should be YESPASSED"
LOG: "$ok(SC.Error) should be NOPASSED"
LOG: "$ok(Error) should be NOPASSED"
LOG: "$ok({ isError: YES }) should be NOPASSED"
LOG: "SC.ERROR module: SC.$val should return the error value if it has one - 0msec"
LOG: "val(true) should be true: truePASSED"
LOG: "val(false) should be false: falsePASSED"
LOG: "val(null) should be YES: nullPASSED"
LOG: "$ok(undefined) should be YES: undefinedPASSED"
LOG: "val(foo) should be YES: fooPASSED"
LOG: "val(SC.Error) should be BAZ: BAZPASSED"
LOG: "val(SC.Error) should be undefined: undefinedPASSED"
LOG: "val(Error) should be null: nullPASSED"
LOG: "val({ isError: YES, errorValue: BAR }) should be BAR: BARPASSED"
LOG: "SC.ERROR module: errorObject property should return the error itself - 1msec"
LOG: "errorObject should return receiver: SC.Error:sc28:foo (-1)PASSED"
LOG: "Plan finished."
tests/system/logger.js
LOG: "Plan begun."
LOG: "SC.Logger module: exists - 1msec"
LOG: "Reporter does exist check: truePASSED"
LOG: "Reporter does not exist check: falsePASSED"
LOG: "SC.Logger module: log - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "Function is null -- fallBackOnAlert true: truePASSED"
LOG: "SC.Logger module: dir - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null -- fallBackOnLog true: truePASSED"
LOG: "Function is null -- fallBackOnLog false: falsePASSED"
LOG: "SC.Logger module: dirxml - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null -- fallBackOnLog true: truePASSED"
LOG: "Function is null -- fallBackOnLog false: falsePASSED"
LOG: "SC.Logger module: error - 1msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null -- fallBackOnLog true: truePASSED"
LOG: "Function is null -- fallBackOnLog false: falsePASSED"
LOG: "SC.Logger module: group - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "SC.Logger module: groupEnd - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "SC.Logger module: info - 1msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null -- fallBackOnLog true: truePASSED"
LOG: "Function is null -- fallBackOnLog false: falsePASSED"
LOG: "SC.Logger module: profile - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "SC.Logger module: profileEnd - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "SC.Logger module: time - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "SC.Logger module: timeEnd - 1msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "SC.Logger module: trace - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null: falsePASSED"
LOG: "SC.Logger module: warn - 0msec"
LOG: "Function is defined: truePASSED"
LOG: "Function is null -- fallBackOnLog true: truePASSED"
LOG: "Function is null -- fallBackOnLog false: falsePASSED"
LOG: "SC.Logger module: _argumentsToString - 1msec"
LOG: "Formatting using default delimiter: test, test2PASSED"
LOG: "Formatting using custom delimiter: test|test2PASSED"
LOG: "Plan finished."
tests/system/run_loop.js
LOG: "Plan begun."
LOG: "System:run_loop() - chained binding module: Should propograte bindings after the RunLoop completes (using SC.RunLoop) - 3msec"
LOG: "OK: changePASSED"
LOG: "OK: firstPASSED"
LOG: "OK: changePASSED"
LOG: "OK: changePASSED"
LOG: "System:run_loop() - chained binding module: Should propograte bindings after the RunLoop completes (using SC.beginRunLoop) - 2msec"
LOG: "OK: changePASSED"
LOG: "OK: firstPASSED"
LOG: "OK: changePASSED"
LOG: "OK: changePASSED"
LOG: "System:run_loop() - chained binding module: Should propograte bindings after the RunLoop completes (checking invokeOnce() function) - 2msec"
LOG: "OK: changePASSED"
LOG: "OK: firstPASSED"
LOG: "OK: changePASSED"
LOG: "OK: changePASSED"
LOG: "OK: againChangedPASSED"
LOG: "OK: changePASSED"
LOG: "Plan finished."
tests/system/set.js
LOG: "Plan begun."
LOG: "creating SC.Set instances module: SC.Set.create() should create empty set - 1msec"
LOG: "OK: 0PASSED"
LOG: "creating SC.Set instances module: SC.Set.create([1,2,3]) should create set with three items in them - 0msec"
LOG: "OK: 3PASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "creating SC.Set instances module: SC.Set.create() should accept anything that implements SC.Array - 1msec"
LOG: "OK: 3PASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "SC.Set.add + SC.Set.contains module: should add an SC.Object - 1msec"
LOG: "contains(): truePASSED"
LOG: "new set length: 1PASSED"
LOG: "SC.Set.add + SC.Set.contains module: should add a regular hash - 0msec"
LOG: "contains(): truePASSED"
LOG: "new set length: 1PASSED"
LOG: "SC.Set.add + SC.Set.contains module: should add a string - 0msec"
LOG: "contains(): truePASSED"
LOG: "new set length: 1PASSED"
LOG: "SC.Set.add + SC.Set.contains module: should add a number - 1msec"
LOG: "contains(): truePASSED"
LOG: "new set length: 1PASSED"
LOG: "SC.Set.add + SC.Set.contains module: should add a bool - 0msec"
LOG: "contains(): truePASSED"
LOG: "new set length: 1PASSED"
LOG: "SC.Set.add + SC.Set.contains module: should add a function - 0msec"
LOG: "contains(): truePASSED"
LOG: "new set length: 1PASSED"
LOG: "SC.Set.add + SC.Set.contains module: should NOT add a null - 0msec"
LOG: "OK: 0PASSED"
LOG: "OK: falsePASSED"
LOG: "SC.Set.add + SC.Set.contains module: should NOT add an undefined - 1msec"
LOG: "OK: 0PASSED"
LOG: "OK: falsePASSED"
LOG: "SC.Set.add + SC.Set.contains module: adding an item, removing it, adding another item - 0msec"
LOG: "set.contains(item1): falsePASSED"
LOG: "set.length: 2PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should remove an SC.Object and reduce length - 1msec"
LOG: "OK: truePASSED"
LOG: "should be removed: falsePASSED"
LOG: "should be 1 shorter: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should remove a regular hash and reduce length - 0msec"
LOG: "OK: truePASSED"
LOG: "should be removed: falsePASSED"
LOG: "should be 1 shorter: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should remove a string and reduce length - 0msec"
LOG: "OK: truePASSED"
LOG: "should be removed: falsePASSED"
LOG: "should be 1 shorter: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should remove a number and reduce length - 0msec"
LOG: "OK: truePASSED"
LOG: "should be removed: falsePASSED"
LOG: "should be 1 shorter: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should remove a bool and reduce length - 0msec"
LOG: "OK: truePASSED"
LOG: "should be removed: falsePASSED"
LOG: "should be 1 shorter: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should remove a function and reduce length - 1msec"
LOG: "OK: truePASSED"
LOG: "should be removed: falsePASSED"
LOG: "should be 1 shorter: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should NOT remove a null - 0msec"
LOG: "OK: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should NOT remove an undefined - 0msec"
LOG: "OK: 5PASSED"
LOG: "SC.Set.remove + SC.Set.contains module: should ignore removing an object not in the set - 1msec"
LOG: "OK: 5PASSED"
LOG: "SC.Set.pop + SC.Set.clone module: the pop() should remove an arbitrary object from the set - 0msec"
LOG: "pops up an object: objectPASSED"
LOG: "length shorter by 1: 4PASSED"
LOG: "SC.Set.pop + SC.Set.clone module: the clone() should return an indentical set - 0msec"
LOG: "length of the clone should be same: 5PASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "OK: truePASSED"
LOG: "Plan finished."
tests/system/sparse_array.js
LOG: "Plan begun."
LOG: "SC.SparseArray module: new SparseArray has expected length - 0msec"
LOG: "length: 10000PASSED"
LOG: "SC.SparseArray module: fetching the object at index - 1msec"
LOG: "Index of 'there' is: 2PASSED"
LOG: "SC.SparseArray module: Update the sparse array using provideObjectAtIndex - 0msec"
LOG: "Content at 0th index: notPASSED"
LOG: "Content at 1st index: nowPASSED"
LOG: "SC.SparseArray module: objectAt() should get the object at the specified index - 1msec"
LOG: "the length: 4PASSED"
LOG: "first object: :sc24PASSED"
LOG: "second object: SproutcorePASSED"
LOG: "third object: 2PASSED"
LOG: "fourth object: truePASSED"
LOG: "SC.replace module: element to be added is at idx > length of array  - 1msec"
LOG: "length: 5PASSED"
LOG: "length: 6PASSED"
LOG: "SC.replace module: element to be added is such that amt + idx > length of array  - 0msec"
LOG: "length: 5PASSED"
LOG: "length: 6PASSED"
LOG: "SC.replace module: element to be added is at idx > length of array  - 0msec"
LOG: "length: 5PASSED"
LOG: "length: 5PASSED"
LOG: "SC.replace module: modifying a range should not require the rest of the array to refetch - 1msec"
LOG: "precond - should provide foo: fooPASSED"
LOG: "precond - should invoke sparseArrayDidRequestIndex() one time: 1PASSED"
LOG: "should provide foo at index after delete: fooPASSED"
LOG: "should NOT invoke sparseArrayRequestIndex() since it was provided already: 0PASSED"
LOG: "SC.replace module: Check that requestIndex works with a rangeWindowSize larger than 1 - 1msec"
LOG: "length: 10PASSED"
LOG: "The range was requested: truePASSED"
LOG: "SC.replace module: definedIndexes - 2msec"
LOG: "definedIndexes() should return all defined indexes: SC.IndexSet<5>PASSED"
LOG: "definedIndexes([2..11]) should return indexes within: SC.IndexSet<5>PASSED"
LOG: "definedIndexes([2]) should return empty set (since does not overlap with defined index): SC.IndexSet<>PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#length module: should return 0 on empty array - 0msec"
LOG: "should have empty length: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#length module: should return array length - 1msec"
LOG: "should return length: 3PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#indexOf module: should return index of object - 0msec"
LOG: "obj.indexOf(0) should match idx: 0PASSED"
LOG: "obj.indexOf(1) should match idx: 1PASSED"
LOG: "obj.indexOf(2) should match idx: 2PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#indexOf module: should return -1 when requesting object not in index - 0msec"
LOG: "obj.indexOf(foo) should be < 0: -1PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [].insertAt(0, X) => [X] + notify - 2msec"
LOG: "length should update (:sc48): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [].insertAt(200,X) => OUT_OF_RANGE_EXCEPTION exception - 1msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [A].insertAt(0, X) => [X,A] + notify - 1msec"
LOG: "length should update (:sc55): 2PASSED"
LOG: "objectAt(1): 0PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [A].insertAt(1, X) => [A,X] + notify - 1msec"
LOG: "length should update (:sc59): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [A].insertAt(200,X) => OUT_OF_RANGE exception - 1msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [A,B,C].insertAt(0,X) => [X,A,B,C] + notify - 1msec"
LOG: "length should update (:sc66): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [A,B,C].insertAt(1,X) => [A,X,B,C] + notify - 1msec"
LOG: "length should update (:sc70): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 0PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#insertAt module: [A,B,C].insertAt(3,X) => [A,B,C,X] + notify - 1msec"
LOG: "length should update (:sc74): 4PASSED"
LOG: "objectAt(3): 0PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#objectAt module: should return object at specified index - 0msec"
LOG: "obj.objectAt(0) should match: 0PASSED"
LOG: "obj.objectAt(1) should match: 1PASSED"
LOG: "obj.objectAt(2) should match: 2PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#objectAt module: should return undefined when requesting objects beyond index - 0msec"
LOG: "should return undefined for obj.objectAt(5) when len = 3: undefinedPASSED"
LOG: "should return undefined for obj.objectAt(0) when len = 0: undefinedPASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#popObject module: [].popObject() => [] + returns undefined + NO notify - 1msec"
LOG: "should return undefined: undefinedPASSED"
LOG: "length should update (:sc86): 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#popObject module: [X].popObject() => [] + notify - 1msec"
LOG: "should return popped object: 0PASSED"
LOG: "length should update (:sc90): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#popObject module: [A,B,C].popObject() => [A,B] + notify - 3msec"
LOG: "should return popped object: 2PASSED"
LOG: "length should update (:sc94): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#pushObject module: returns pushed object - 1msec"
LOG: "should return receiver: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#pushObject module: [].pushObject(X) => [X] + notify - 0msec"
LOG: "length should update (:sc101): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#pushObject module: [A,B,C].pushObject(X) => [A,B,C,X] + notify - 1msec"
LOG: "length should update (:sc105): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: returns RangeObserver object - 1msec"
LOG: "returns a range observer objectPASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: replacing object in range fires observer with index set covering only the effected item - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc134PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: replacing object before range - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: replacing object after range - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: updating range should be reflected by replace operations - 3msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "expects one callback: 1PASSED"
LOG: ":sc179PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: removing range should no longer fire observers - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: grouping property changes should notify observer only once at end with single IndexSet - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc213PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,4> (actual: SC.IndexSet<2,4>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: should notify observer when some but not all grouped changes are inside range - 3msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc229PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,9> (actual: SC.IndexSet<2,9>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: should NOT notify observer when grouping changes all outside of observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: insertAt in range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc261PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..10> (actual: SC.IndexSet<3..10>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: insertAt BEFORE range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc276PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0..10> (actual: SC.IndexSet<0..10>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: insertAt AFTER range does not fire observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: removeAt IN range fires observer with index set covering edit to end of array plus delta - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc306PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..9> (actual: SC.IndexSet<3..9>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: removeAt BEFORE range fires observer with index set covering edit to end of array plus delta - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc320PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0..9> (actual: SC.IndexSet<0..9>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods module: removeAt AFTER range does not fire observer - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: returns RangeObserver object - 1msec"
LOG: "returns a range observer objectPASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: replacing object in range fires observer with index set covering only the effected item - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc362PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: replacing at start of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc377PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<0> (actual: SC.IndexSet<0>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: replacing object at end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc392PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: removing range should no longer fire observers - 2msec"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "observer should not fire: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: grouping property changes should notify observer only once at end with single IndexSet - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc424PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2,4> (actual: SC.IndexSet<2,4>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: insertAt in range fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc440PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..10> (actual: SC.IndexSet<3..10>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: adding object fires observer - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc455PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<10> (actual: SC.IndexSet<10>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: removeAt fires observer with index set covering edit to end of array - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc470PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<3..9> (actual: SC.IndexSet<3..9>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - No explicit range module: popObject fires observer with index set covering removed range - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc484PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<9> (actual: SC.IndexSet<9>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - isDeep NO module: editing property on object at any point should not fire observer - 3msec"
LOG: "observer should not fire when editing object at index 9: 0PASSED"
LOG: "observer should not fire when editing object at index 3: 0PASSED"
LOG: "observer should not fire when editing object at index 0: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#RangeObserver Methods - isDeep NO module: replacing object in range fires observer with index set - 2msec"
LOG: "expects one callback: 1PASSED"
LOG: ":sc512PASSED"
LOG: "object: nullPASSED"
LOG: "key: []PASSED"
LOG: "indexes should be index setPASSED"
LOG: "indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeAt module: [X].removeAt(0) => [] + notify - 1msec"
LOG: "length should update (:sc517): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeAt module: [].removeAt(200) => OUT_OF_RANGE_EXCEPTION exception - 0msec"
LOG: "should throw SC.OUT_OF_RANGE_EXCEPTION: Index out of rangePASSED"
LOG: "should raise exceptionPASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeAt module: [A,B].removeAt(0) => [B] + notify - 1msec"
LOG: "length should update (:sc524): 1PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeAt module: [A,B].removeAt(1) => [A] + notify - 1msec"
LOG: "length should update (:sc528): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeAt module: [A,B,C].removeAt(1) => [A,C] + notify - 2msec"
LOG: "length should update (:sc532): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeAt module: [A,B,C,D].removeAt(1,2) => [A,D] + notify - 1msec"
LOG: "length should update (:sc536): 2PASSED"
LOG: "objectAt(1): 3PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeAt module: [A,B,C,D].removeAt(IndexSet<0,2-3>) => [B] + notify - 1msec"
LOG: "length should update (:sc540): 1PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeObject module: should return receiver - 0msec"
LOG: "should return receiver: :sc547PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeObject module: [A,B,C].removeObject(B) => [A,C] + notify - 1msec"
LOG: "length should update (:sc549): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#removeObject module: [A,B,C].removeObject(D) => [A,B,C] - 0msec"
LOG: "length should update (:sc553): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#replace module: [].replace(0,0,'X') => ['X'] + notify - 1msec"
LOG: "length should update (:sc557): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#replace module: [A,B,C,D].replace(1,2,X) => [A,X,D] + notify - 1msec"
LOG: "length should update (:sc561): 3PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 4PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#replace module: [A,B,C,D].replace(1,2,[X,Y]) => [A,X,Y,D] + notify - 2msec"
LOG: "length should update (:sc565): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 5PASSED"
LOG: "objectAt(1): 4PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#replace module: [A,B].replace(1,0,[X,Y]) => [A,X,Y,B] + notify - 1msec"
LOG: "length should update (:sc569): 4PASSED"
LOG: "objectAt(3): 1PASSED"
LOG: "objectAt(2): 3PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#replace module: [A,B,C,D].replace(2,2) => [A,B] + notify - 1msec"
LOG: "length should update (:sc573): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#shiftObject module: [].shiftObject() => [] + returns undefined + NO notify - 0msec"
LOG: "should return undefined: undefinedPASSED"
LOG: "length should update (:sc577): 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#shiftObject module: [X].shiftObject() => [] + notify - 2msec"
LOG: "should return shifted object: 0PASSED"
LOG: "length should update (:sc581): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#shiftObject module: [A,B,C].shiftObject() => [B,C] + notify - 1msec"
LOG: "should return shifted object: 0PASSED"
LOG: "length should update (:sc585): 2PASSED"
LOG: "objectAt(1): 2PASSED"
LOG: "objectAt(0): 1PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#unshiftObject module: returns unshifted object - 1msec"
LOG: "should return receiver: 0PASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#unshiftObject module: [].unshiftObject(X) => [X] + notify - 0msec"
LOG: "length should update (:sc592): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Verify SC.Array compliance: SC.SparseArray#unshiftObject module: [A,B,C].unshiftObject(X) => [X,A,B,C] + notify - 1msec"
LOG: "length should update (:sc596): 4PASSED"
LOG: "objectAt(3): 3PASSED"
LOG: "objectAt(2): 2PASSED"
LOG: "objectAt(1): 1PASSED"
LOG: "objectAt(0): 0PASSED"
LOG: "should notify []: truePASSED"
LOG: "should notify length change: truePASSED"
LOG: "Plan finished."
tests/private/observer_queue/isObservingSuspended.js
LOG: "Plan begun."
LOG: "SC.Observers.isObservingSuspended module: suspending observers stops notification - 2msec"
LOG: "should not notify observer while suspended: 0PASSED"
LOG: "should not notify observer while still suspended: 0PASSED"
LOG: "should notify observer when resumed: 1PASSED"
LOG: "SC.Observers.isObservingSuspended module: suspended notifications should work when nesting property change groups - 1msec"
LOG: "should not notify observer while suspended: 0PASSED"
LOG: "should not notify observer while suspended: 0PASSED"
LOG: "should notify observer when resumed: 1PASSED"
LOG: "Plan finished."
tests/mixins/observable/observable.js
LOG: "Plan begun."
LOG: "object.get() module: should get normal properties - 1msec"
LOG: "OK: valuePASSED"
LOG: "object.get() module: should call computed properties and return their result - 0msec"
LOG: "OK: valuePASSED"
LOG: "object.get() module: should return the function for a non-computed property - 1msec"
LOG: "OK: functionPASSED"
LOG: "object.get() module: should return null when property value is null - 0msec"
LOG: "OK: nullPASSED"
LOG: "object.get() module: should call unknownProperty when value is undefined - 0msec"
LOG: "OK: unknownPASSED"
LOG: "OK: unknownPASSED"
LOG: "object.set() module: should change normal properties and return this - 1msec"
LOG: "OK: changedPASSED"
LOG: "OK: :sc30PASSED"
LOG: "object.set() module: should call computed properties passing value and return this - 0msec"
LOG: "OK: changedPASSED"
LOG: "OK: functionPASSED"
LOG: "OK: :sc32PASSED"
LOG: "object.set() module: should replace the function for a non-computed property and return this - 0msec"
LOG: "OK: methodPASSED"
LOG: "OKPASSED"
LOG: "OK: :sc34PASSED"
LOG: "object.set() module: should replace prover when property value is null - 0msec"
LOG: "OK: changedPASSED"
LOG: "OK: unknownPASSED"
LOG: "OK: :sc36PASSED"
LOG: "object.set() module: should call unknownProperty with value when property is undefined - 1msec"
LOG: "OK: changedPASSED"
LOG: "OK: :sc38PASSED"
LOG: "Computed properties module: getting values should call function return value - 1msec"
LOG: "Try #1: object.get(computed) should run function: computedPASSED"
LOG: "Try #2: object.get(computed) should run function: computedPASSED"
LOG: "Try #1: object.get(computedCached) should run function: computedCachedPASSED"
LOG: "Try #2: object.get(computedCached) should run function: computedCachedPASSED"
LOG: "Try #1: object.get(dependent) should run function: dependentPASSED"
LOG: "Try #2: object.get(dependent) should run function: dependentPASSED"
LOG: "Try #1: object.get(dependentCached) should run function: dependentCachedPASSED"
LOG: "Try #2: object.get(dependentCached) should run function: dependentCachedPASSED"
LOG: "non-cached property computedCalls should be called 2x: 2PASSED"
LOG: "non-cached property dependentCalls should be called 2x: 2PASSED"
LOG: "non-cached property computedCachedCalls should be called 1x: 1PASSED"
LOG: "non-cached property dependentCachedCalls should be called 1x: 1PASSED"
LOG: "Computed properties module: setting values should call function return value - 2msec"
LOG: "Try #1: object.set(computed, value1) should run function: :sc56PASSED"
LOG: "Try #2: object.set(computed, value2) should run function: :sc56PASSED"
LOG: "Try #3: object.set(computed, value2) should not run function since it is setting same value as before: :sc56PASSED"
LOG: "Try #1: object.set(dependent, value1) should run function: :sc56PASSED"
LOG: "Try #2: object.set(dependent, value2) should run function: :sc56PASSED"
LOG: "Try #3: object.set(dependent, value2) should not run function since it is setting same value as before: :sc56PASSED"
LOG: "Try #1: object.set(computedCached, value1) should run function: :sc56PASSED"
LOG: "Try #2: object.set(computedCached, value2) should run function: :sc56PASSED"
LOG: "Try #3: object.set(computedCached, value2) should not run function since it is setting same value as before: :sc56PASSED"
LOG: "Try #1: object.set(dependentCached, value1) should run function: :sc56PASSED"
LOG: "Try #2: object.set(dependentCached, value2) should run function: :sc56PASSED"
LOG: "Try #3: object.set(dependentCached, value2) should not run function since it is setting same value as before: :sc56PASSED"
LOG: "set(computed) should be called 2x: 2PASSED"
LOG: "call #1 to set(computed) should have passed value value1: value1PASSED"
LOG: "call #2 to set(computed) should have passed value value2: value2PASSED"
LOG: "set(dependent) should be called 2x: 2PASSED"
LOG: "call #1 to set(dependent) should have passed value value1: value1PASSED"
LOG: "call #2 to set(dependent) should have passed value value2: value2PASSED"
LOG: "set(computedCached) should be called 2x: 2PASSED"
LOG: "call #1 to set(computedCached) should have passed value value1: value1PASSED"
LOG: "call #2 to set(computedCached) should have passed value value2: value2PASSED"
LOG: "set(dependentCached) should be called 2x: 2PASSED"
LOG: "call #1 to set(dependentCached) should have passed value value1: value1PASSED"
LOG: "call #2 to set(dependentCached) should have passed value value2: value2PASSED"
LOG: "Computed properties module: notify change should clear cache - 1msec"
LOG: "should have invoked method 2x: 2PASSED"
LOG: "Computed properties module: change dependent should clear cache - 1msec"
LOG: "multiple calls should not run cached prop: 0PASSED"
LOG: "should increment after dependent key changes: 1PASSED"
LOG: "Computed properties module: just notifying change of dependent should clear cache - 0msec"
LOG: "multiple calls should not run cached prop: 0PASSED"
LOG: "should increment after dependent key changes: 1PASSED"
LOG: "Computed properties module: changing dependent should clear nested cache - 1msec"
LOG: "multiple calls should not run cached prop: 0PASSED"
LOG: "should increment after dependent key changes: 1PASSED"
LOG: "Computed properties module: just notifying change of dependent should clear nested cache - 1msec"
LOG: "multiple calls should not run cached prop: 0PASSED"
LOG: "should increment after dependent key changes: 1PASSED"
LOG: "Computed properties module: change dependent should clear cache when observers of dependent are called - 1msec"
LOG: "multiple calls should not run cached prop: 0PASSED"
LOG: "should increment after dependent key changes: 1PASSED"
LOG: "Computed properties module: allPropertiesDidChange should clear cache - 0msec"
LOG: "should not change after first call: 0PASSED"
LOG: "should increment after change: 1PASSED"
LOG: "Computed properties module: setting one of two computed properties that depend on a third property should clear the kvo cache - 1msec"
LOG: "object.isOff should be YES: truePASSED"
LOG: "object.isOn should be NO: falsePASSED"
LOG: "Observable objects & object properties  module: incrementProperty and decrementProperty - 1msec"
LOG: "numerical value incremented: 25PASSED"
LOG: "numerical value decremented: 23PASSED"
LOG: "Observable objects & object properties  module: toggle function, should be boolean - 1msec"
LOG: "OK: falsePASSED"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "Observable objects & object properties  module: should not notify the observers of a property automatically - 1msec"
LOG: "OK: zeroValuePASSED"
LOG: "Observable objects & object properties  module: should notify array observer when array changes - 1msec"
LOG: "observer should be notified: notifiedObserverPASSED"
LOG: "object.addObserver() module: should register an observer for a property - 1msec"
LOG: "OK: newZeroValuePASSED"
LOG: "object.addObserver() module: should register an observer for a property - Special case of chained property - 1msec"
LOG: "OK: chainedPropertyObservedPASSED"
LOG: "OK: chainedPropertyObservedPASSED"
LOG: "object.removeObserver() module: should unregister an observer for a property - 1msec"
LOG: "OK: newZeroValuePASSED"
LOG: "OK: zeroValuePASSED"
LOG: "object.removeObserver() module: should unregister an observer for a property - special case when key has a '.' in it. - 1msec"
LOG: "OK: dependentValuePASSED"
LOG: "OK: dependentValuePASSED"
LOG: "Bind function  module: should bind property with method parameter as undefined - 2msec"
LOG: "objectA.name is binded: changedValuePASSED"
LOG: "Bind function  module: changing chained observer object to null should not raise exception - 1msec"
LOG: "new target value should be null: nullPASSED"
LOG: "key should be bat: batPASSED"
LOG: "changing bar should trigger observer: 1PASSED"
LOG: "Plan finished."
tests/mixins/observable/propertyChanges.js
LOG: "Plan begun."
LOG: "object.propertyChanges module: should observe the changes within the nested begin / end property changes - 1msec"
LOG: "OK: propValuePASSED"
LOG: "OK: newFooValuePASSED"
LOG: "OK: changedPropValuePASSED"
LOG: "OK: changedNewFooValuePASSED"
LOG: "object.propertyChanges module: should increment the indicator before begining the changes to the object - 1msec"
LOG: "OK: 1PASSED"
LOG: "object.propertyChanges module: should increment the indicator before begining the changes to the object - 0msec"
LOG: "OK: 0PASSED"
LOG: "object.propertyChanges module: should observe the changes within the begin and end property changes - 1msec"
LOG: "OK: propValuePASSED"
LOG: "OK: changedPropValuePASSED"
LOG: "object.propertyChanges module: should indicate that the property of an object has just changed - 1msec"
LOG: "OK: propValuePASSED"
LOG: "OK: changedPropValuePASSED"
LOG: "object.propertyChanges module: should notify that the property of an object has changed - 0msec"
LOG: "OK: changedNewPropValuePASSED"
LOG: "object.propertyChanges module: should notify all observers that their property might have changed - 1msec"
LOG: "OK: changedPropValuePASSED"
LOG: "OK: changedNewPropValuePASSED"
LOG: "OK: changedNewFooValuePASSED"
LOG: "object.propertyChanges module: star observers - 1msec"
LOG: "should have fired star observer for foo: fooPASSED"
LOG: "should have fired star observer for bar: barPASSED"
LOG: "object.propertyChanges module: revision passed to observers should match .propertyRevision - 1msec"
LOG: "OK: truePASSED"
LOG: "Plan finished."
tests/mixins/observable/registerDependentKeys.js
LOG: "Plan begun."
LOG: "object.registerDependentKeys() module: should indicate the registered property changes if the dependent key value changes - 2msec"
LOG: "OK: Jane DoePASSED"
LOG: "OK: Jane JohnsonPASSED"
LOG: "object.registerDependentKeys() module: should indicate the registered property changes if the dependent key value changes and change is within begin property loop  - 1msec"
LOG: "OK: \"\"PASSED"
LOG: "OK: Jane JohnsonPASSED"
LOG: "Plan finished."
tests/system/index_set/add.js
LOG: "Plan begun."
LOG: "SC.IndexSet#add module: add range to end of set - 2msec"
LOG: "should have correct index count: 5PASSED"
LOG: "max should return 1 past last index: 1005PASSED"
LOG: "OK: 1000,1001,1002,1003,1004PASSED"
LOG: "SC.IndexSet#add module: add range into middle of empty range - 1msec"
LOG: "precond - first index is 100: 100PASSED"
LOG: "should have extra length: 3PASSED"
LOG: "max should return 1 past last index: 102PASSED"
LOG: "OK: 10,100,101PASSED"
LOG: "SC.IndexSet#add module: add range overlapping front edge of range - 0msec"
LOG: "precond - first index is 100: 100PASSED"
LOG: "should have extra length: 3PASSED"
LOG: "max should return 1 past last index: 102PASSED"
LOG: "OK: 99,100,101PASSED"
LOG: "SC.IndexSet#add module: add range overlapping last edge of range - 1msec"
LOG: "should have two sets: 100,101,200,201PASSED"
LOG: "new set.length: 5PASSED"
LOG: "max should return 1 past last index: 202PASSED"
LOG: "should include 101-102: 100,101,102,200,201PASSED"
LOG: "SC.IndexSet#add module: add range overlapping two ranges, merging into one - 1msec"
LOG: "should have two sets: 100,101,110,111PASSED"
LOG: "new set.length: 12PASSED"
LOG: "max should return 1 past last index: 112PASSED"
LOG: "should include one range 100-111: 100,101,102,103,104,105,106,107,108,109,110,111PASSED"
LOG: "SC.IndexSet#add module: add range overlapping three ranges, merging into one - 1msec"
LOG: "should have two sets: 100,101,105,106,110,111PASSED"
LOG: "new set.length: 12PASSED"
LOG: "max should return 1 past last index: 112PASSED"
LOG: "should include one range 100-111: 100,101,102,103,104,105,106,107,108,109,110,111PASSED"
LOG: "SC.IndexSet#add module: add range partially overlapping one range and replaing another range, merging into one - 1msec"
LOG: "should have two sets: 100,101,105,106PASSED"
LOG: "new set.length: 11PASSED"
LOG: "max should return 1 past last index: 111PASSED"
LOG: "should include one range 100-110: 100,101,102,103,104,105,106,107,108,109,110PASSED"
LOG: "SC.IndexSet#add module: add range overlapping last index - 0msec"
LOG: "precond - first index is 100: 100PASSED"
LOG: "should have extra length: 3PASSED"
LOG: "max should return 1 past last index: 103PASSED"
LOG: "OK: 100,101,102PASSED"
LOG: "SC.IndexSet#add module: add range matching existing range - 1msec"
LOG: "precond - first index is 100: 100PASSED"
LOG: "should not change: 5PASSED"
LOG: "max should return 1 past last index: 105PASSED"
LOG: "OK: 100,101,102,103,104PASSED"
LOG: "SC.IndexSet#add module: add with no params should do nothing - 0msec"
LOG: "OK: PASSED"
LOG: "SC.IndexSet#add module: add with single number should add index only - 0msec"
LOG: "OK: 2PASSED"
LOG: "SC.IndexSet#add module: add with range object should add range only - 0msec"
LOG: "OK: 2,3PASSED"
LOG: "SC.IndexSet#add module: add with index set should add indexes in set - 1msec"
LOG: "OK: 2,3,10,11PASSED"
LOG: "SC.IndexSet#add module: adding a range should trigger an observer notification - 0msec"
LOG: "should have called observer once: 1PASSED"
LOG: "SC.IndexSet#add module: adding a range over an existing range should not trigger an observer notification - 1msec"
LOG: "should not have called observer: 0PASSED"
LOG: "SC.IndexSet#add module: appending a range to end should merge into last range - 1msec"
LOG: "last two range should merge together (SC.IndexSet<0:-2 , 2:4 , 4:0>): 2PASSED"
LOG: "should have max: 4PASSED"
LOG: "should have length: 2PASSED"
LOG: "last two range should merge together (SC.IndexSet<0:-2000 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2000:4000 , 2048:2000 , 2304:2000 , 2560:2000 , 2816:2000 , 3072:2000 , 3328:2000 , 3584:2000 , 3840:2000 , 4000:0>): 2000PASSED"
LOG: "should have max: 4000PASSED"
LOG: "should have length: 2000PASSED"
LOG: "SC.IndexSet#add module: appending range to start of empty set should create a single range - 1msec"
LOG: "should have single range (SC.IndexSet<0:2 , 2:0>): 0PASSED"
LOG: "should have length: 2PASSED"
LOG: "should have max: 2PASSED"
LOG: "should have single range (SC.IndexSet<0:2000 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2000:0>): 0PASSED"
LOG: "should have length: 2000PASSED"
LOG: "should have max: 2000PASSED"
LOG: "SC.IndexSet#add module: add raises exception when frozen - 0msec"
LOG: "OK: Error: Cannot modify a frozen objectPASSED"
LOG: "SC.IndexSet#add module: adding in the same range should keep length consistent - 1msec"
LOG: "set length should be 4: 4PASSED"
LOG: "set length should remain 4 after set.add(1,3): 4PASSED"
LOG: "set length should remain 4 after set.add(1,2): 4PASSED"
LOG: "Plan finished."
tests/system/index_set/addEach.js
LOG: "Plan begun."
LOG: "SC.IndexSet#addEach module: adding should iterate over an array - 2msec"
LOG: "should have correct index count: 4PASSED"
LOG: "max should return 1 past last index: 1031PASSED"
LOG: "OK: 1000,1010,1020,1030PASSED"
LOG: "SC.IndexSet#addEach module: adding should iterate over a set - 1msec"
LOG: "should have correct index count: 4PASSED"
LOG: "max should return 1 past last index: 1031PASSED"
LOG: "OK: 1000,1010,1020,1030PASSED"
LOG: "SC.IndexSet#addEach module: adding should iterate over a indexset - 1msec"
LOG: "should have correct index count: 5PASSED"
LOG: "max should return 1 past last index: 1031PASSED"
LOG: "OK: 1000,1001,1010,1020,1030PASSED"
LOG: "Plan finished."
tests/system/index_set/clone.js
LOG: "Plan begun."
LOG: "SC.IndexSet#clone module: clone should return new object with same key properties - 1msec"
LOG: "return value should not be nullPASSED"
LOG: "cloned set should not be same instance as setPASSED"
LOG: "set.isEqual(set2) should be truePASSED"
LOG: "clone should have same length: 200PASSED"
LOG: "clone should have same min: 100PASSED"
LOG: "clone should have same max: 300PASSED"
LOG: "clone should have same source: fooPASSED"
LOG: "SC.IndexSet#clone module: cloning frozen object returns unfrozen - 0msec"
LOG: "set2.isFrozen should be NO: falsePASSED"
LOG: "SC.IndexSet#clone module: copy works like clone - 1msec"
LOG: "should return copy: SC.IndexSet<>PASSED"
LOG: "should not return same instancePASSED"
LOG: "should return same instance when frozen: SC.IndexSet<>PASSED"
LOG: "Plan finished."
tests/system/index_set/contains.js
LOG: "Plan begun."
LOG: "SC.IndexSet#contains module: handle index in set - 1msec"
LOG: "index 1001 should be in set SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "index 1009 should be in set SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "index 2000 should be in set SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "SC.IndexSet#contains module: handle index not in set - 1msec"
LOG: "index 0 should not be in set: falsePASSED"
LOG: "index 10 should not be in set: falsePASSED"
LOG: "index 1100 should not be in set: falsePASSED"
LOG: "SC.IndexSet#contains module: handle index past end of set - 1msec"
LOG: "index 3000 should not be in set: falsePASSED"
LOG: "SC.IndexSet#contains module: handle range inside set - 0msec"
LOG: "1001..1003 should be in set: truePASSED"
LOG: "SC.IndexSet#contains module: handle range outside of set - 1msec"
LOG: "100..1003 should NOT be in set: falsePASSED"
LOG: "SC.IndexSet#contains module: handle range partially inside set - 0msec"
LOG: "998..1001 should be in set: falsePASSED"
LOG: "SC.IndexSet#contains module: handle set inside set - 1msec"
LOG: "SC.IndexSet<1001..1006> should be in SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "SC.IndexSet#contains module: handle range outside of set - 1msec"
LOG: "SC.IndexSet<100..103,105..106> should be in SC.IndexSet<1000..1009,2000>: falsePASSED"
LOG: "SC.IndexSet#contains module: handle range partially inside set - 1msec"
LOG: "SC.IndexSet<100..101,1001..1004> should be in SC.IndexSet<1000..1009,2000>: falsePASSED"
LOG: "SC.IndexSet#contains module: handle self - 0msec"
LOG: "should return YES when passed itself: truePASSED"
LOG: "Plan finished."
tests/system/index_set/create.js
LOG: "Plan begun."
LOG: "SC.IndexSet#create module: create with no params - 1msec"
LOG: "should have no indexes: 0PASSED"
LOG: "SC.IndexSet#create module: create with just index - 1msec"
LOG: "should have 1 index: 1PASSED"
LOG: "should contain index: truePASSED"
LOG: "should not contain 5: falsePASSED"
LOG: "SC.IndexSet#create module: create with index and length - 0msec"
LOG: "should have 2 indexes: 2PASSED"
LOG: "should contain 4: truePASSED"
LOG: "should contain 5: truePASSED"
LOG: "SC.IndexSet#create module: create with other set - 1msec"
LOG: "should have same number of indexes (2): 2PASSED"
LOG: "should contain 4, just like first: truePASSED"
LOG: "should contain 5, just like first: truePASSED"
LOG: "Plan finished."
tests/system/index_set/indexAfter.js
LOG: "Plan begun."
LOG: "SC.IndexSet.indexAfter module: no earlier index in set - 2msec"
LOG: "set.indexAfter(3) in SC.IndexSet<5,10..14,100> should start of first index range: 5PASSED"
LOG: "SC.IndexSet.indexAfter module: with index after end of set - 1msec"
LOG: "set.indexAfter(1000) in SC.IndexSet<5,10..14,100> should return -1: -1PASSED"
LOG: "SC.IndexSet.indexAfter module: inside of multi-index range - 0msec"
LOG: "set.indexAfter(12) in SC.IndexSet<5,10..14,100> should return next index: 13PASSED"
LOG: "SC.IndexSet.indexAfter module: end of multi-index range - 1msec"
LOG: "set.indexAfter(14) in SC.IndexSet<5,10..14,100> should start of next range: 100PASSED"
LOG: "SC.IndexSet.indexAfter module: single index range - 0msec"
LOG: "set.indexAfter(5) in SC.IndexSet<5,10..14,100> should start of next range multi-index range: 10PASSED"
LOG: "Plan finished."
tests/system/index_set/indexBefore.js
LOG: "Plan begun."
LOG: "SC.IndexSet.indexBefore module: no earlier index in set - 1msec"
LOG: "set.indexBefore(4) in SC.IndexSet<5,10..14,100> should not have index before it: -1PASSED"
LOG: "SC.IndexSet.indexBefore module: with index after end of set - 1msec"
LOG: "set.indexBefore(1000) in SC.IndexSet<5,10..14,100> should return last index in set: 100PASSED"
LOG: "SC.IndexSet.indexBefore module: inside of multi-index range - 1msec"
LOG: "set.indexBefore(12) in SC.IndexSet<5,10..14,100> should return previous index: 11PASSED"
LOG: "SC.IndexSet.indexBefore module: beginning of multi-index range - 0msec"
LOG: "set.indexBefore(10) in SC.IndexSet<5,10..14,100> should end of previous range: 5PASSED"
LOG: "SC.IndexSet.indexBefore module: single index range - 1msec"
LOG: "set.indexBefore(100) in SC.IndexSet<5,10..14,100> should end of previous range multi-index range: 14PASSED"
LOG: "Plan finished."
tests/system/index_set/intersects.js
LOG: "Plan begun."
LOG: "SC.IndexSet#intersects module: handle index in set - 2msec"
LOG: "index 1001 should be in set SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "index 1009 should be in set SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "index 2000 should be in set SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "SC.IndexSet#intersects module: handle index not in set - 1msec"
LOG: "index 0 should not be in set: falsePASSED"
LOG: "index 10 should not be in set: falsePASSED"
LOG: "index 1100 should not be in set: falsePASSED"
LOG: "SC.IndexSet#intersects module: handle index past end of set - 0msec"
LOG: "index 3000 should not be in set: falsePASSED"
LOG: "SC.IndexSet#intersects module: handle range inside set - 1msec"
LOG: "1001..1003 should be in set: truePASSED"
LOG: "SC.IndexSet#intersects module: handle range outside of set - 0msec"
LOG: "100..1003 should NOT be in set: falsePASSED"
LOG: "SC.IndexSet#intersects module: handle range partially inside set - 1msec"
LOG: "998..1001 should be in set: truePASSED"
LOG: "SC.IndexSet#intersects module: handle set inside set - 1msec"
LOG: "SC.IndexSet<1001..1006> should be in SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "SC.IndexSet#intersects module: handle range outside of set - 0msec"
LOG: "SC.IndexSet<100..103,105..106> should be in SC.IndexSet<1000..1009,2000>: falsePASSED"
LOG: "SC.IndexSet#intersects module: handle range partially inside set - 0msec"
LOG: "SC.IndexSet<100..101,1001..1004> should be in SC.IndexSet<1000..1009,2000>: truePASSED"
LOG: "SC.IndexSet#intersects module: handle self - 1msec"
LOG: "should return YES when passed itself: truePASSED"
LOG: "Plan finished."
tests/system/index_set/max.js
LOG: "Plan begun."
LOG: "SC.IndexSet#max module: newly created index - 1msec"
LOG: "max should be 0: 0PASSED"
LOG: "SC.IndexSet#max module: after adding one range - 0msec"
LOG: "max should be one greater than max index: 6PASSED"
LOG: "SC.IndexSet#max module: after adding range then removing part of range - 0msec"
LOG: "max should be one greater than max index: 6PASSED"
LOG: "SC.IndexSet#max module: after adding range several disjoint ranges - 1msec"
LOG: "max should be one greater than max index: 6001PASSED"
LOG: "SC.IndexSet#max module: after removing disjoint range - 0msec"
LOG: "max should be one greater than max index: 6PASSED"
LOG: "SC.IndexSet#max module: after removing all ranges - 1msec"
LOG: "max should be back to 0 with no content: 0PASSED"
LOG: "Plan finished."
tests/system/index_set/min.js
LOG: "Plan begun."
LOG: "SC.IndexSet#min module: newly created index - 1msec"
LOG: "min should be -1: -1PASSED"
LOG: "SC.IndexSet#min module: after adding one range - 0msec"
LOG: "min should be lowest index: 4PASSED"
LOG: "SC.IndexSet#min module: after adding range then removing part of range - 1msec"
LOG: "min should be lowest index: 6PASSED"
LOG: "SC.IndexSet#min module: after adding range several disjoint ranges - 0msec"
LOG: "min should be lowest index: 4PASSED"
LOG: "SC.IndexSet#min module: after removing disjoint range - 1msec"
LOG: "min should be lowest index: 6000PASSED"
LOG: "SC.IndexSet#min module: after removing all ranges - 1msec"
LOG: "min should be back to -1 with no content: -1PASSED"
LOG: "Plan finished."
tests/system/index_set/rangeStartForIndex.js
LOG: "Plan begun."
LOG: "SC.IndexSet#rangeStartForIndex module: index is start of range - 1msec"
LOG: "should return start: 522PASSED"
LOG: "should return first range: 0PASSED"
LOG: "SC.IndexSet#rangeStartForIndex module: index is middle of range - 1msec"
LOG: "should return start: 522PASSED"
LOG: "should return start: 522PASSED"
LOG: "should return first range: 0PASSED"
LOG: "SC.IndexSet#rangeStartForIndex module: index last index - 0msec"
LOG: "should return end of range: 906PASSED"
LOG: "SC.IndexSet#rangeStartForIndex module: index past last index - 1msec"
LOG: "should return end of range: 906PASSED"
LOG: "Plan finished."
tests/system/index_set/remove.js
LOG: "Plan begun."
LOG: "SC.IndexSet#remove module: remove a range after end of set - 1msec"
LOG: "precond - should be empty: 0PASSED"
LOG: "should still be empty: 0PASSED"
LOG: "max should return 1 past last index: 0PASSED"
LOG: "should be empty: PASSED"
LOG: "SC.IndexSet#remove module: remove range in middle of an existing range - 1msec"
LOG: "precond - should have range: 100,101,102,103PASSED"
LOG: "new length should not include removed range: 2PASSED"
LOG: "max should return 1 past last index: 104PASSED"
LOG: "should remove range in the middle: 100,103PASSED"
LOG: "SC.IndexSet#remove module: remove range overlapping front edge of range - 1msec"
LOG: "precond - first index is 100: 100PASSED"
LOG: "should have extra length: 1PASSED"
LOG: "max should return 1 past last index: 102PASSED"
LOG: "OK: 101PASSED"
LOG: "SC.IndexSet#remove module: remove range overlapping last edge of range - 1msec"
LOG: "should have two sets: 100,101,200,201PASSED"
LOG: "new set.length: 3PASSED"
LOG: "max should return 1 past last index: 202PASSED"
LOG: "should remove 101-102: 100,200,201PASSED"
LOG: "SC.IndexSet#remove module: remove range overlapping two ranges, remove parts of both - 0msec"
LOG: "should have two sets: 100,101,110,111PASSED"
LOG: "new set.length: 2PASSED"
LOG: "max should return 1 past last index: 112PASSED"
LOG: "should remove range 101-110: 100,111PASSED"
LOG: "SC.IndexSet#remove module: remove range overlapping three ranges, removing one and parts of the others - 1msec"
LOG: "should have two sets: 100,101,105,106,110,111PASSED"
LOG: "new set.length: 2PASSED"
LOG: "max should return 1 past last index: 112PASSED"
LOG: "should remove range 101-110: 100,111PASSED"
LOG: "SC.IndexSet#remove module: remove range partially overlapping one range and replacing another range - 1msec"
LOG: "should have two sets: 100,101,105,106PASSED"
LOG: "new set.length: 1PASSED"
LOG: "max should return 1 past last index: 101PASSED"
LOG: "should include one range 100-110: 100PASSED"
LOG: "SC.IndexSet#remove module: remove range overlapping last index - 1msec"
LOG: "precond - first index is 100: 100PASSED"
LOG: "should have extra length: 1PASSED"
LOG: "max should return 1 past last index: 101PASSED"
LOG: "OK: 100PASSED"
LOG: "SC.IndexSet#remove module: remove range matching existing range - 0msec"
LOG: "OK: 100,101,102,103,104PASSED"
LOG: "should be empty: 0PASSED"
LOG: "max should return 1 past last index: 0PASSED"
LOG: "OK: PASSED"
LOG: "SC.IndexSet#remove module: remove with no params should do nothing - 1msec"
LOG: "OK: 10,11PASSED"
LOG: "SC.IndexSet#remove module: remove with single number should add index only - 0msec"
LOG: "OK: 11PASSED"
LOG: "SC.IndexSet#remove module: remove with range object should add range only - 1msec"
LOG: "OK: 12,13,14PASSED"
LOG: "SC.IndexSet#remove module: remove with index set should add indexes in set - 1msec"
LOG: "OK: 0,1,4,5,6,7,8,9,12,13PASSED"
LOG: "SC.IndexSet#remove module: remove a range should trigger an observer notification - 0msec"
LOG: "should have called observer once: 1PASSED"
LOG: "SC.IndexSet#remove module: removing a non-existant range should not trigger observer notification - 0msec"
LOG: "should NOT have called observer: 0PASSED"
LOG: "SC.IndexSet#remove module: removing a clone of the same index set should leave an empty set - 0msec"
LOG: "precond - clone is equal to receiverPASSED"
LOG: "set should now be empty: 0PASSED"
LOG: "SC.IndexSet#remove module: removing an index range outside of target range (specific bug) - 1msec"
LOG: "length should not change: 3PASSED"
LOG: "SC.IndexSet#remove module: remove() raises exception when frozen - 0msec"
LOG: "OK: Error: Cannot modify a frozen objectPASSED"
LOG: "Plan finished."
tests/system/index_set/removeEach.js
LOG: "Plan begun."
LOG: "SC.IndexSet#addEach module: should iterate over an array - 3msec"
LOG: "should have correct index count: 1PASSED"
LOG: "max should return 1 past last index: 1002PASSED"
LOG: "OK: 1001PASSED"
LOG: "SC.IndexSet#addEach module: adding should iterate over a set - 1msec"
LOG: "should have correct index count: 1PASSED"
LOG: "max should return 1 past last index: 1002PASSED"
LOG: "OK: 1001PASSED"
LOG: "SC.IndexSet#addEach module: adding should iterate over a indexset - 2msec"
LOG: "should have correct index count: 1PASSED"
LOG: "max should return 1 past last index: 1002PASSED"
LOG: "OK: 1001PASSED"
LOG: "Plan finished."
tests/system/index_set/without.js
LOG: "Plan begun."
LOG: "SC.IndexSet#without module: should return empty set when removing self - 1msec"
LOG: "is not same instancePASSED"
LOG: "OK: PASSED"
LOG: "SC.IndexSet#without module: should return set with range removed from middle - 1msec"
LOG: "is not same instancePASSED"
LOG: "OK: 1,8,9PASSED"
LOG: "SC.IndexSet#without module: should return set with range removed overlapping end - 1msec"
LOG: "is not same instancePASSED"
LOG: "OK: 1,2,3,4,5PASSED"
LOG: "SC.IndexSet#without module: should return set with range removed overlapping beginning - 0msec"
LOG: "is not same instancePASSED"
LOG: "OK: 6,7,8,9PASSED"
LOG: "SC.IndexSet#without module: should return set with multiple ranges removed - 0msec"
LOG: "is not same instancePASSED"
LOG: "OK: 1,4,5,8,9PASSED"
LOG: "SC.IndexSet#without module: using without should properly hint returned index set - 13msec"
LOG: "index set should have hint at loc 256 - set: SC.IndexSet<0:-10001 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2048:0 , 2304:0 , 2560:0 , 2816:0 , 3072:0 , 3328:0 , 3584:0 , 3840:0 , 4096:0 , 4352:0 , 4608:0 , 4864:0 , 5120:0 , 5376:0 , 5632:0 , 5888:0 , 6144:0 , 6400:0 , 6656:0 , 6912:0 , 7168:0 , 7424:0 , 7680:0 , 7936:0 , 8192:0 , 8448:0 , 8704:0 , 8960:0 , 9216:0 , 9472:0 , 9728:0 , 9984:0 , 10001:10005 , 10005:0>: 0PASSED"
LOG: "index set should have hint at loc 512 - set: SC.IndexSet<0:-10001 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2048:0 , 2304:0 , 2560:0 , 2816:0 , 3072:0 , 3328:0 , 3584:0 , 3840:0 , 4096:0 , 4352:0 , 4608:0 , 4864:0 , 5120:0 , 5376:0 , 5632:0 , 5888:0 , 6144:0 , 6400:0 , 6656:0 , 6912:0 , 7168:0 , 7424:0 , 7680:0 , 7936:0 , 8192:0 , 8448:0 , 8704:0 , 8960:0 , 9216:0 , 9472:0 , 9728:0 , 9984:0 , 10001:10005 , 10005:0>: 0PASSED"
LOG: "index set should have hint at loc 768 - set: SC.IndexSet<0:-10001 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2048:0 , 2304:0 , 2560:0 , 2816:0 , 3072:0 , 3328:0 , 3584:0 , 3840:0 , 4096:0 , 4352:0 , 4608:0 , 4864:0 , 5120:0 , 5376:0 , 5632:0 , 5888:0 , 6144:0 , 6400:0 , 6656:0 , 6912:0 , 7168:0 , 7424:0 , 7680:0 , 7936:0 , 8192:0 , 8448:0 , 8704:0 , 8960:0 , 9216:0 , 9472:0 , 9728:0 , 9984:0 , 10001:10005 , 10005:0>: 0PASSED"
LOG: "index set should have hint at loc 1024 - set: SC.IndexSet<0:-10001 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2048:0 , 2304:0 , 2560:0 , 2816:0 , 3072:0 , 3328:0 , 3584:0 , 3840:0 , 4096:0 , 4352:0 , 4608:0 , 4864:0 , 5120:0 , 5376:0 , 5632:0 , 5888:0 , 6144:0 , 6400:0 , 6656:0 , 6912:0 , 7168:0 , 7424:0 , 7680:0 , 7936:0 , 8192:0 , 8448:0 , 8704:0 , 8960:0 , 9216:0 , 9472:0 , 9728:0 , 9984:0 , 10001:10005 , 10005:0>: 0PASSED"
LOG: "index set should have hint at loc 1280 - set: SC.IndexSet<0:-10001 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2048:0 , 2304:0 , 2560:0 , 2816:0 , 3072:0 , 3328:0 , 3584:0 , 3840:0 , 4096:0 , 4352:0 , 4608:0 , 4864:0 , 5120:0 , 5376:0 , 5632:0 , 5888:0 , 6144:0 , 6400:0 , 6656:0 , 6912:0 , 7168:0 , 7424:0 , 7680:0 , 7936:0 , 8192:0 , 8448:0 , 8704:0 , 8960:0 , 9216:0 , 9472:0 , 9728:0 , 9984:0 , 10001:10005 , 10005:0>: 0PASSED"
LOG: "index set should have hint at loc 1536 - set: SC.IndexSet<0:-10001 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2048:0 , 2304:0 , 2560:0 , 2816:0 , 3072:0 , 3328:0 , 3584:0 , 3840:0 , 4096:0 , 4352:0 , 4608:0 , 4864:0 , 5120:0 , 5376:0 , 5632:0 , 5888:0 , 6144:0 , 6400:0 , 6656:0 , 6912:0 , 7168:0 , 7424:0 , 7680:0 , 7936:0 , 8192:0 , 8448:0 , 8704:0 , 8960:0 , 9216:0 , 9472:0 , 9728:0 , 9984:0 , 10001:10005 , 10005:0>: 0PASSED"
LOG: "index set should have hint at loc 1792 - set: SC.IndexSet<0:-10001 , 256:0 , 512:0 , 768:0 , 1024:0 , 1280:0 , 1536:0 , 1792:0 , 2048:0 , 2304:0 , 2560:0 , 2816:0 , 3072:0 , 3328:0 , 3584:0 , 3840:0 , 4096:0 , 4352:0 , 4608:0 , 4864:0 , 5120:0 , 5376:0 , 5632:0 , 5888:0 , 6144:0 , 6400:0 , 6656:0 , 6912:0 , 7168:0 , 7424:0 , 7680:0 , 7936:0 , 8192:0 , 8448:0 , 8704:0 , 8960:0 , 9216:0 , 9472:0 , 9728:0 , 9984:0 , 10001:10005 , 10005:0>: 0PASSED"
LOG: "SC.IndexSet#without module: passing no params should return clone - 1msec"
LOG: "is not same instancePASSED"
LOG: "has same contentPASSED"
LOG: "SC.IndexSet#without module: passing single number should remove just that index - 0msec"
LOG: "OK: 1,2,3,4,6,7,8,9PASSED"
LOG: "SC.IndexSet#without module: passing two numbers should remove range - 0msec"
LOG: "OK: 1,8,9PASSED"
LOG: "SC.IndexSet#without module: passing range object should remove range - 1msec"
LOG: "OK: 1,8,9PASSED"
LOG: "Plan finished."
tests/system/object/base.js
LOG: "Plan begun."
LOG: "A new SC.Object instance module: Should identify it's methods using the 'respondsTo' method - 1msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "A new SC.Object instance module: Should return false when asked to perform a method it does not have - 1msec"
LOG: "OK: falsePASSED"
LOG: "A new SC.Object instance module: Should pass back the return YES if method returned YES, NO if method not implemented or returned NO - 0msec"
LOG: "method that returns YES: truePASSED"
LOG: "method that returns non-NO: truePASSED"
LOG: "method that returns NO: falsePASSED"
LOG: "method that is not implemented: falsePASSED"
LOG: "A new SC.Object instance module: Should return it's properties when requested using SC.Object#get - 1msec"
LOG: "OK: barPASSED"
LOG: "OK: 12345PASSED"
LOG: "A new SC.Object instance module: Should allow changing of those properties by calling SC.Object#set - 0msec"
LOG: "OK: barPASSED"
LOG: "OK: 12345PASSED"
LOG: "OK: Chunky BaconPASSED"
LOG: "OK: 12PASSED"
LOG: "A new SC.Object instance module: Should only advertise changes once per request to SC.Object#didChangeFor - 1msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "A new SC.Object instance module: Should advertise changes once per request to SC.Object#didChangeFor when setting property to NULL - 0msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "A new SC.Object instance module: When the object is destroyed the 'isDestroyed' status should change accordingly - 0msec"
LOG: "OK: falsePASSED"
LOG: "OK: truePASSED"
LOG: "SC.Object instance extended module: Checking the instance of method for an object - 1msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "SC.Object instance extended module: Checking the kind of method for an object - 0msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "OK: falsePASSED"
LOG: "SC.Object superclass and subclasses module: Checking the superclass method for an existing function - 0msec"
LOG: "OK: helloPASSED"
LOG: "SC.Object superclass and subclasses module: Checking the subclassOf function on an object and its subclass - 1msec"
LOG: "OK: truePASSED"
LOG: "OK: falsePASSED"
LOG: "SC.Object superclass and subclasses module: subclasses should contain defined subclasses - 1msec"
LOG: "obj.subclasses should contain obj1PASSED"
LOG: "obj1.subclasses should be empty: 0PASSED"
LOG: "obj1.subclasses should contain kls2PASSED"
LOG: "Plan finished."
tests/system/object/bindings.js
LOG: "Plan begun."
LOG: "bind() method module: bind(TestNamespace.fromObject.bar) should follow absolute path - 2msec"
LOG: "testObject.foo: changedValuePASSED"
LOG: "bind() method module: bind(.bar) should bind to relative path - 1msec"
LOG: "testObject.foo: changedValuePASSED"
LOG: "bind() method module: SC.Binding.bool(TestNamespace.fromObject.bar)) should create binding with bool transform - 1msec"
LOG: "testObject.foo == YES: truePASSED"
LOG: "testObject.foo == NO: falsePASSED"
LOG: "bind() method module: bind(TestNamespace.fromObject*extraObject.foo) should create chained binding - 1msec"
LOG: "testObject.foo: extraObjectValuePASSED"
LOG: "bind() method module: bind(*extraObject.foo) should create locally chained binding - 1msec"
LOG: "testObject.foo: extraObjectValuePASSED"
LOG: "fooBinding method module: fooBinding: TestNamespace.fromObject.bar should follow absolute path - 2msec"
LOG: "testObject.foo: changedValuePASSED"
LOG: "fooBinding method module: fooBinding: .bar should bind to relative path - 1msec"
LOG: "testObject.foo: changedValuePASSED"
LOG: "fooBinding method module: fooBinding: SC.Binding.bool(TestNamespace.fromObject.bar should create binding with bool transform - 1msec"
LOG: "testObject.foo == YES: truePASSED"
LOG: "testObject.foo == NO: falsePASSED"
LOG: "fooBinding method module: fooBinding: TestNamespace.fromObject*extraObject.foo should create chained binding - 2msec"
LOG: "testObject.foo: extraObjectValuePASSED"
LOG: "fooBinding method module: fooBinding: *extraObject.foo should create locally chained binding - 1msec"
LOG: "testObject.foo: extraObjectValuePASSED"
LOG: "fooBindingDefault: SC.Binding.Bool (old style) module: fooBinding: TestNamespace.fromObject.bar should have bool binding - 1msec"
LOG: "testObject.foo == YES: truePASSED"
LOG: "testObject.foo == NO: falsePASSED"
LOG: "fooBindingDefault: SC.Binding.Bool (old style) module: fooBinding: SC.Binding.not(TestNamespace.fromObject.bar should override default - 2msec"
LOG: "testObject.foo == NO: falsePASSED"
LOG: "testObject.foo == YES: truePASSED"
LOG: "fooBindingDefault: SC.Binding.bool() (new style) module: fooBinding: TestNamespace.fromObject.bar should have bool binding - 1msec"
LOG: "testObject.foo == YES: truePASSED"
LOG: "testObject.foo == NO: falsePASSED"
LOG: "fooBindingDefault: SC.Binding.bool() (new style) module: fooBinding: SC.Binding.not(TestNamespace.fromObject.bar should override default - 1msec"
LOG: "testObject.foo == NO: falsePASSED"
LOG: "testObject.foo == YES: truePASSED"
LOG: "Plan finished."
tests/system/range_observer/create.js
LOG: "Plan begun."
LOG: "SC.RangeObserver#create module: returns new instance - 1msec"
LOG: "returns range observerPASSED"
LOG: "SC.RangeObserver#create module: sets up observing on properties for each object in range in index if isDeep - 2msec"
LOG: "range observer should fire twice: 2PASSED"
LOG: "SC.RangeObserver#create module: does not observe object properties if isDeep is NO - 2msec"
LOG: "range observer should not fire: 0PASSED"
LOG: "Plan finished."
tests/system/range_observer/destroy.js
LOG: "Plan begun."
LOG: "SC.RangeObserver#destroy module: returns receiver - 1msec"
LOG: "should return receiverPASSED"
LOG: "SC.RangeObserver#destroy module: never observes changes if no changes happend - 1msec"
LOG: "range observer should not fire: 0PASSED"
LOG: "SC.RangeObserver#destroy module: stops observes changes if changes happend before destroy - 3msec"
LOG: "range observer should fire only first time through: 2PASSED"
LOG: "Plan finished."
tests/system/range_observer/objectPropertyDidChange.js
LOG: "Plan begun."
LOG: "SC.RangeObserver#objectPropertyDidChange module: changing property on object that does not appear in range - 2msec"
LOG: "should not invoke observer callback: 0PASSED"
LOG: "SC.RangeObserver#objectPropertyDidChange module: changing property on object that appears one time in range - 2msec"
LOG: "source should match source arrayPASSED"
LOG: "passed object should match: :sc28PASSED"
LOG: "passed key should match: fooPASSED"
LOG: "passed indexes should be an index set (actual: SC.IndexSet<2>)PASSED"
LOG: "passed indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "should not invoke observer callback: 1PASSED"
LOG: "SC.RangeObserver#objectPropertyDidChange module: changing property on object that appears more than one time in range - 2msec"
LOG: "source should match source arrayPASSED"
LOG: "passed object should match: :sc36PASSED"
LOG: "passed key should match: fooPASSED"
LOG: "passed indexes should be an index set (actual: SC.IndexSet<2..3>)PASSED"
LOG: "passed indexes should match SC.IndexSet<2..3> (actual: SC.IndexSet<2..3>)PASSED"
LOG: "should not invoke observer callback: 1PASSED"
LOG: "SC.RangeObserver#objectPropertyDidChange module: changing all properties on object that apepars one time in range - 2msec"
LOG: "source should match source arrayPASSED"
LOG: "passed object should match: :sc43PASSED"
LOG: "passed key should match: *PASSED"
LOG: "passed indexes should be an index set (actual: SC.IndexSet<2>)PASSED"
LOG: "passed indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "should not invoke observer callback: 1PASSED"
LOG: "SC.RangeObserver#objectPropertyDidChange module: notifications with context - 2msec"
LOG: "source should match source arrayPASSED"
LOG: "passed object should match: :sc50PASSED"
LOG: "passed key should match: fooPASSED"
LOG: "passed indexes should be an index set (actual: SC.IndexSet<2>)PASSED"
LOG: "passed indexes should match SC.IndexSet<2> (actual: SC.IndexSet<2>)PASSED"
LOG: "passed context should match: contextPASSED"
LOG: "should not invoke observer callback: 1PASSED"
LOG: "Plan finished."
tests/system/range_observer/rangeDidChange.js
LOG: "Plan begun."
LOG: "SC.RangeObserver#rangeDidChange module: returns receiver - 1msec"
LOG: "should return receiverPASSED"
LOG: "SC.RangeObserver#rangeDidChange module: invokes callback if no changes set is passed - 1msec"
LOG: "source should match source arrayPASSED"
LOG: "object param should be nullPASSED"
LOG: "passed key should be brackets: []PASSED"
LOG: "passed indexes should be null: nullPASSED"
LOG: "should pass context: contextPASSED"
LOG: "should invoke callback: 1PASSED"
LOG: "SC.RangeObserver#rangeDidChange module: invokes callback if changes set is passed and it intersects with observed range - 1msec"
LOG: "source should match source arrayPASSED"
LOG: "object param should be nullPASSED"
LOG: "passed key should be brackets: []PASSED"
LOG: "passed indexes should be SC.IndexSet<1..2>.  actual: SC.IndexSet<1..2>PASSED"
LOG: "should pass context: contextPASSED"
LOG: "should invoke callback: 1PASSED"
LOG: "SC.RangeObserver#rangeDidChange module: does NOT invoke callback if changes set is passed and it intersects with observed range - 1msec"
LOG: "should NOT invoke callback: 0PASSED"
LOG: "SC.RangeObserver#rangeDidChange module: if object in observed range changes, should stop observing old objects and start observing new objects - no previous changes - 2msec"
LOG: "should invoke observer when new object changes: 1PASSED"
LOG: "SC.RangeObserver#rangeDidChange module: if object in observed range changes, should stop observing old objects and start observing new objects - previous changes - 3msec"
LOG: "precond - should invoke observer on original object: 1PASSED"
LOG: "should invoke observer when new object changes: 1PASSED"
LOG: "Plan finished."
tests/system/range_observer/update.js
LOG: "Plan begun."
LOG: "SC.RangeObserver#update module: returns receiver - 2msec"
LOG: "should return receiverPASSED"
LOG: "SC.RangeObserver#update module: switches to observing new range - no previous updated - 2msec"
LOG: "range observer should fire on new range: 1PASSED"
LOG: "SC.RangeObserver#update module: switches to observing new range - previously updated - 2msec"
LOG: "range observer should fire on new range: 1PASSED"
LOG: "Plan finished."
tests/system/selection_set/add.js
LOG: "Plan begun."
LOG: "SC.SelectionSet#add module: Adding indexes for single source - 4msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<1,4..6> expected: SC.IndexSet<1,4..6>)PASSED"
LOG: "SC.SelectionSet#add module: Adding multiple sources - 2msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,k,l,m): 2PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have indexSet for source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet.source should match source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet should match for source a,b,c,d,e,f,g,h,i,k,l,m (actual: SC.IndexSet<1> expected: SC.IndexSet<1>)PASSED"
LOG: "SC.SelectionSet#add module: Adding IndexSet with source - 1msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "SC.SelectionSet#add module: Adding another SelectionSet - 3msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have same number of sources (actual sources: a,b,c,d,e,f,g,h,i,k,l,m): 1PASSED"
LOG: "should have indexSet for source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet.source should match source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet should match for source a,b,c,d,e,f,g,h,i,k,l,m (actual: SC.IndexSet<1..5> expected: SC.IndexSet<1..5>)PASSED"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,k,l,m): 2PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have indexSet for source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet.source should match source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet should match for source a,b,c,d,e,f,g,h,i,k,l,m (actual: SC.IndexSet<1..5> expected: SC.IndexSet<1..5>)PASSED"
LOG: "SC.SelectionSet#add module: Adding indexes with range object !! - 2msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "Plan finished."
tests/system/selection_set/copy.js
LOG: "Plan begun."
LOG: "SC.SelectionSet.copy module: basic copy - 3msec"
LOG: "precond - original set should have length: 3PASSED"
LOG: "copy should have same length: 3PASSED"
LOG: "copy should be the same as original set: SC.SelectionSet:sc19<sc20<4..5,7>>PASSED"
LOG: "Plan finished."
tests/system/selection_set/indexSetForSource.js
LOG: "Plan begun."
LOG: "SC.SelectionSet#indexSetForSource module: empty selection set - 1msec"
LOG: "should return null for source not in set: nullPASSED"
LOG: "should return null for source not in set (2): nullPASSED"
LOG: "SC.SelectionSet#indexSetForSource module: selection set if index range is added - 3msec"
LOG: "should return an index set for the arrayPASSED"
LOG: "should be index set that was added: SC.IndexSet<3..6>PASSED"
LOG: "should return new index set when membership changes: SC.IndexSet<4..6>PASSED"
LOG: "should return combined index set when multiple items are added: SC.IndexSet<4..6,10>PASSED"
LOG: "SC.SelectionSet#indexSetForSource module: selection set if objects in index set are added - 2msec"
LOG: "should return index set with objects found in set interpolated: SC.IndexSet<0>PASSED"
LOG: "should return index set with objects found in set interpolated (2): SC.IndexSet<0>PASSED"
LOG: "should return null when matching objects are removed: nullPASSED"
LOG: "removing other objects should not effect: SC.IndexSet<0>PASSED"
LOG: "SC.SelectionSet#indexSetForSource module: selection set if objects and ranged are added - 3msec"
LOG: "should return index set with objects found in set interpolated: SC.IndexSet<0,4..6>PASSED"
LOG: "should return index set with objects found in set interpolated (2): SC.IndexSet<0>PASSED"
LOG: "should return just range when objects are removed: SC.IndexSet<4..6>PASSED"
LOG: "removing other objects should not effect: SC.IndexSet<0>PASSED"
LOG: "SC.SelectionSet#indexSetForSource module: add and remove source - 1msec"
LOG: "should return null for source not in set: nullPASSED"
LOG: "SC.SelectionSet#indexSetForSource module: looking up indexSet for source when objects are added should recache when source content changes - 2msec"
LOG: "should return index set with item at 0: SC.IndexSet<0>PASSED"
LOG: "should return index set with item at end: SC.IndexSet<9>PASSED"
LOG: "Plan finished."
tests/system/selection_set/isEqual.js
LOG: "Plan begun."
LOG: "SC.SelectionSet.isEqual module: set.isEqual(same instance) - 0msec"
LOG: "same instance should return YESPASSED"
LOG: "SC.SelectionSet.isEqual module: set.isEqual(null) - 0msec"
LOG: "null should return NOPASSED"
LOG: "SC.SelectionSet.isEqual module: set1.isEqual(set2) - 3msec"
LOG: "same content should return YESPASSED"
LOG: "same content should return YESPASSED"
LOG: "same content should return YESPASSED"
LOG: "same content should return YESPASSED"
LOG: "SC.SelectionSet.isEqual module: multiple content objects - 2msec"
LOG: "should not be same when set2 is emptyPASSED"
LOG: "should not be same when set2 has only one contentPASSED"
LOG: "should not be same when set2 has both contentPASSED"
LOG: "SC.SelectionSet.isEqual module: set1.isEqual(set2) after set2 is filled and emptied - 1msec"
LOG: "same content should return YESPASSED"
LOG: "Plan finished."
tests/system/selection_set/remove.js
LOG: "Plan begun."
LOG: "SC.SelectionSet#remove module: Removed indexes for single source - 4msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<5..6> expected: SC.IndexSet<5..6>)PASSED"
LOG: "SC.SelectionSet#remove module: Removed multiple sources - 3msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,k,l,m): 2PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have indexSet for source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet.source should match source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet should match for source a,b,c,d,e,f,g,h,i,k,l,m (actual: SC.IndexSet<1> expected: SC.IndexSet<1>)PASSED"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<5..6> expected: SC.IndexSet<5..6>)PASSED"
LOG: "SC.SelectionSet#remove module: Remove IndexSet with source - 3msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<5..6> expected: SC.IndexSet<5..6>)PASSED"
LOG: "SC.SelectionSet#remove module: Adding another SelectionSet - 4msec"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,k,l,m): 2PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<4..6> expected: SC.IndexSet<4..6>)PASSED"
LOG: "should have indexSet for source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet.source should match source: a,b,c,d,e,f,g,h,i,k,l,mPASSED"
LOG: "indexSet should match for source a,b,c,d,e,f,g,h,i,k,l,m (actual: SC.IndexSet<1> expected: SC.IndexSet<1>)PASSED"
LOG: "should have same number of sources (actual sources: 0,1,2,3,4,5,6,7,8,9): 1PASSED"
LOG: "should have indexSet for source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet.source should match source: 0,1,2,3,4,5,6,7,8,9PASSED"
LOG: "indexSet should match for source 0,1,2,3,4,5,6,7,8,9 (actual: SC.IndexSet<5..6> expected: SC.IndexSet<5..6>)PASSED"
LOG: "SC.SelectionSet#remove module: removing index set should also remove individually added objects - 2msec"
LOG: "set should contain objToRemovePASSED"
LOG: "set should contain objToNotRemovePASSED"
LOG: "set.length sould == two objects + index.length: 5PASSED"
LOG: "set should NOT contain objToRemovePASSED"
LOG: "set should contain objToNotRemovePASSED"
LOG: "set.length should == 1 object + index.length: 2PASSED"
LOG: "Plan finished."
